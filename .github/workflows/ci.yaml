name: CI
on: [push, pull_request]

env:
  THREADS: 4
  CONFIG: RelWithDebInfo

jobs:
  clang-format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: DoozyX/clang-format-lint-action@v0.12
      with:
        exclude: './thirdparty'
        clangFormatVersion: 12

  amalgamation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: clone amalgamate
      uses: actions/checkout@v2
      with:
        repository: shrpnsld/amalgamate
        path: build/amalgamate
    - name: amalgamation
      run: |
        cd include/llama
        ../../build/amalgamate/amalgamate -o ../../build -H -v -a
    - name: upload llama.hpp
      uses: actions/upload-artifact@v2
      with:
        name: llama.hpp
        path: build/llama-amalgamated/llama.hpp

  build-ubuntu:
    runs-on: ubuntu-latest
    env: ${{ matrix.env }}
    name: ${{ matrix.name }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: build-ubuntu-gcc9-cuda
            env: {CXX: g++-9, CUDA_INSTALLER: cuda_11.2.0_460.27.04_linux.run}
            cuda: true
          - name: build-ubuntu-gcc10
            env: {CXX: g++-10}
          - name: build-ubuntu-clang10
            env: {CXX: clang++-10}
          - name: build-ubuntu-clang11
            env: {CXX: clang++-11, INSTALL_EXTRA: clang-11}
          - name: build-ubuntu-clang12
            env: {CXX: clang++-12, INSTALL_EXTRA: clang-12 libomp-12-dev}
            add-llvm-repo: true
          - name: build-ubuntu-icpc
            env: {CXX: icpc}
            intel: true
          - name: build-ubuntu-icpx
            env: {CXX: icpx}
            intel: true

    steps:
      - uses: actions/checkout@v2
      - name: add LLVM APT repo
        if: ${{ matrix.add-llvm-repo }}
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-12 main'
      - name: install OneAPI
        if: ${{ matrix.intel }}
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
          sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
          sudo apt update
          sudo apt install intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
      - name: install boost
        run: |
          sudo apt update
          sudo apt install libboost-all-dev $INSTALL_EXTRA
      - name: vcpkg install dependencies
        run: |
          # vcpkg fails to build with Intel compilers
          if [ ${{ matrix.intel }} ]; then unset CXX; fi
          vcpkg install catch2 fmt vc tinyobjloader
      - name: download CUDA 11
        if: ${{ matrix.cuda }}
        run: |
          wget --no-verbose https://developer.download.nvidia.com/compute/cuda/11.2.0/local_installers/$CUDA_INSTALLER
      - name: install CUDA 11
        if: ${{ matrix.cuda }}
        run: |
          sudo sh $CUDA_INSTALLER --silent --toolkit
      - name: install alpaka
        run: |
          if [ ${{ matrix.intel }} ]; then source /opt/intel/oneapi/setvars.sh; fi
          git clone https://github.com/alpaka-group/alpaka.git
          mkdir alpaka/build
          cd alpaka/build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
          sudo cmake --build . --target install
      - name: cmake
        run: |
          if [ ${{ matrix.intel }} ]; then source /opt/intel/oneapi/setvars.sh; fi
          mkdir build
          cd build
          CUDACXX=(`echo /usr/local/cuda-*/bin/nvcc`)
          if [ ! -f $CUDACXX ]; then
            unset CUDACXX
          fi
          echo "nvcc is here: $CUDACXX"
          cmake .. -DCMAKE_BUILD_TYPE=$CONFIG -DASAN_FOR_TESTS=ON -DALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE=${{ !matrix.cuda }} -DALPAKA_ACC_GPU_CUDA_ENABLE=${{ matrix.cuda }} -DALPAKA_CXX_STANDARD=17 -DCMAKE_CUDA_COMPILER=$CUDACXX -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
      - name: build tests + examples
        run: |
          if [ ${{ matrix.intel }} ]; then source /opt/intel/oneapi/setvars.sh; fi
          cmake --build build -j $THREADS
      - name: run tests
        run: |
          if [ ${{ matrix.intel }} ]; then source /opt/intel/oneapi/setvars.sh; fi
          build/tests

  build-windows:
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows
      BOOST_ROOT: C:\hostedtoolcache\windows\Boost\1.75.0\x86_64
    steps:
    - uses: actions/checkout@v2
    - name: install vcpkg
      uses: lukka/run-vcpkg@v4
      with:
        setupOnly: true
        vcpkgGitCommitId: 9ab3bafca4de5dec5a5a8b60f1d654cae7ad95aa
    - name: install boost
      run: |
        # From: https://github.com/actions/virtual-environments/issues/2667
        $url = "https://sourceforge.net/projects/boost/files/boost-binaries/1.75.0/boost_1_75_0-msvc-14.1-64.exe"
        (New-Object System.Net.WebClient).DownloadFile($url, "$env:TEMP\boost.exe")
        Start-Process -Wait -FilePath "$env:TEMP\boost.exe" "/SILENT","/SP-","/SUPPRESSMSGBOXES","/DIR=$env:BOOST_ROOT"
    - name: vcpkg install dependencies
      run: |
        & $env:VCPKG_ROOT/vcpkg install catch2 fmt tinyobjloader
        & $env:VCPKG_ROOT/vcpkg install vc --head # MSVC patch is not released yet
    - name: install alpaka
      run: |
        git clone https://github.com/alpaka-group/alpaka.git
        mkdir alpaka/build
        cd alpaka/build
        cmake .. "-DCMAKE_TOOLCHAIN_FILE=$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
        cmake --build . --target install --config $env:CONFIG
    - name: cmake
      run: |
        mkdir build
        cd build
        cmake .. -DALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE=ON "-DCMAKE_TOOLCHAIN_FILE=$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
    - name: build tests + examples
      run: cmake --build build -j $env:THREADS --config $env:CONFIG
    - name: run tests
      run: |
        & build/$env:CONFIG/tests

  build-macos:
    runs-on: macos-latest
    env: {CXX: clang++}
    steps:
      - uses: actions/checkout@v2
      - name: brew install dependencies
        run: |
          brew install boost libomp
      - name: vcpkg install dependencies
        run: |
          vcpkg install catch2 fmt vc tinyobjloader
      - name: install alpaka
        run: |
          git clone https://github.com/alpaka-group/alpaka.git
          mkdir alpaka/build
          cd alpaka/build
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
          sudo cmake --build . --target install
      - name: cmake
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=$CONFIG -DALPAKA_ACC_CPU_B_SEQ_T_SEQ_ENABLE=ON -DALPAKA_CXX_STANDARD=17 -DCMAKE_TOOLCHAIN_FILE=$VCPKG_INSTALLATION_ROOT/scripts/buildsystems/vcpkg.cmake
      - name: build tests + examples
        run: |
          cmake --build build -j $THREADS
      - name: run tests
        run: |
          build/tests
