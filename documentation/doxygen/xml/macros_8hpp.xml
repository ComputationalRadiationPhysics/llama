<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="macros_8hpp" kind="file" language="C++">
    <compoundname>macros.hpp</compoundname>
    <includes local="no">boost/predef.h</includes>
    <includedby refid="Array_8hpp" local="yes">/home/alexander/develop/work/llama/include/llama/Array.hpp</includedby>
    <includedby refid="View_8hpp" local="yes">/home/alexander/develop/work/llama/include/llama/View.hpp</includedby>
    <includedby refid="llama_8hpp" local="yes">/home/alexander/develop/work/llama/include/llama/llama.hpp</includedby>
    <includedby refid="VirtualView_8hpp" local="yes">/home/alexander/develop/work/llama/include/llama/VirtualView.hpp</includedby>
    <includedby refid="Tuple_8dox" local="yes">/home/alexander/develop/work/llama/include/llama/Tuple.dox</includedby>
    <incdepgraph>
      <node id="475">
        <label>boost/predef.h</label>
      </node>
      <node id="474">
        <label>/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp</label>
        <link refid="macros_8hpp"/>
        <childnode refid="475" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="478">
        <label>/home/alexander/develop/work/llama/include/llama/Types.hpp</label>
        <link refid="Types_8hpp"/>
        <childnode refid="479" relation="include">
        </childnode>
        <childnode refid="491" relation="include">
        </childnode>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="488" relation="include">
        </childnode>
        <childnode refid="494" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
      </node>
      <node id="481">
        <label>/home/alexander/develop/work/llama/include/llama/CompareUID.hpp</label>
        <link refid="CompareUID_8hpp"/>
        <childnode refid="482" relation="include">
        </childnode>
      </node>
      <node id="484">
        <label>/home/alexander/develop/work/llama/include/llama/llama.hpp</label>
        <link refid="llama_8hpp"/>
      </node>
      <node id="495">
        <label>/home/alexander/develop/work/llama/include/llama/mapping/Interface.hpp</label>
        <link refid="Interface_8hpp"/>
      </node>
      <node id="477">
        <label>/home/alexander/develop/work/llama/include/llama/Array.hpp</label>
        <link refid="Array_8hpp"/>
        <childnode refid="478" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="496" relation="include">
        </childnode>
      </node>
      <node id="497">
        <label>/home/alexander/develop/work/llama/include/llama/Tuple.dox</label>
        <link refid="Tuple_8dox"/>
      </node>
      <node id="490">
        <label>/home/alexander/develop/work/llama/include/llama/ForEach.hpp</label>
        <link refid="ForEach_8hpp"/>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
      </node>
      <node id="493">
        <label>/home/alexander/develop/work/llama/include/llama/mapping/AoS.hpp</label>
        <link refid="AoS_8hpp"/>
        <childnode refid="484" relation="include">
        </childnode>
      </node>
      <node id="482">
        <label>/home/alexander/develop/work/llama/include/llama/View.hpp</label>
        <link refid="View_8hpp"/>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
      </node>
      <node id="479">
        <label>/home/alexander/develop/work/llama/include/llama/DatumStruct.hpp</label>
        <link refid="DatumStruct_8hpp"/>
        <childnode refid="480" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
        <childnode refid="487" relation="include">
        </childnode>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
      </node>
      <node id="492">
        <label>/home/alexander/develop/work/llama/include/llama/UserDomain.hpp</label>
        <link refid="UserDomain_8hpp"/>
        <childnode refid="491" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="488" relation="include">
        </childnode>
        <childnode refid="494" relation="include">
        </childnode>
      </node>
      <node id="488">
        <label>/home/alexander/develop/work/llama/include/llama/mapping/SoA.hpp</label>
        <link refid="SoA_8hpp"/>
        <childnode refid="484" relation="include">
        </childnode>
      </node>
      <node id="491">
        <label>/home/alexander/develop/work/llama/include/llama/mapping/One.hpp</label>
        <link refid="One_8hpp"/>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
      </node>
      <node id="489">
        <label>/home/alexander/develop/work/llama/include/llama/GetCoordFromUID.hpp</label>
        <link refid="GetCoordFromUID_8hpp"/>
        <childnode refid="490" relation="include">
        </childnode>
      </node>
      <node id="496">
        <label>/home/alexander/develop/work/llama/include/llama/IntegerSequence.hpp</label>
        <link refid="IntegerSequence_8hpp"/>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="483" relation="include">
        </childnode>
      </node>
      <node id="486">
        <label>/home/alexander/develop/work/llama/include/llama/DatumArray.hpp</label>
        <link refid="DatumArray_8hpp"/>
        <childnode refid="484" relation="include">
        </childnode>
      </node>
      <node id="483">
        <label>/home/alexander/develop/work/llama/include/llama/Factory.hpp</label>
        <link refid="Factory_8hpp"/>
        <childnode refid="484" relation="include">
        </childnode>
      </node>
      <node id="487">
        <label>/home/alexander/develop/work/llama/include/llama/GetType.hpp</label>
        <link refid="GetType_8hpp"/>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="488" relation="include">
        </childnode>
      </node>
      <node id="485">
        <label>/home/alexander/develop/work/llama/include/llama/VirtualView.hpp</label>
        <link refid="VirtualView_8hpp"/>
        <childnode refid="484" relation="include">
        </childnode>
      </node>
      <node id="494">
        <label>/home/alexander/develop/work/llama/include/llama/mapping/tree/Mapping.hpp</label>
        <link refid="Mapping_8hpp"/>
        <childnode refid="484" relation="include">
        </childnode>
      </node>
      <node id="476">
        <label>/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp</label>
        <link refid="macros_8hpp"/>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
      </node>
      <node id="480">
        <label>/home/alexander/develop/work/llama/include/llama/GetUID.hpp</label>
        <link refid="GetUID_8hpp"/>
        <childnode refid="481" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="macros_8hpp_1aa201f5c2567527b34eae5fbdab0e2416" prot="public" static="no">
        <name>LLAMA_INDEPENDENT_DATA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shows that all (!) data access inside inside of a loop is indepent, so the loop can safely be vectorized although the compiler may not know the data dependencies completely. Usage looks like this <programlisting><codeline><highlight class="normal"><ref refid="macros_8hpp_1aa201f5c2567527b34eae5fbdab0e2416" kindref="member">LLAMA_INDEPENDENT_DATA</ref></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>of<sp/>LLAMA_INDEPENDENT_DATA<sp/>the<sp/>compiler<sp/>knows<sp/>that<sp/>a<sp/>and<sp/>b<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>overlap<sp/>and<sp/>the<sp/>operation<sp/>can<sp/>safely<sp/>be<sp/>vectorized</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>a[i]<sp/>+=<sp/>b[i];</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" line="58" column="12" bodyfile="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8hpp_1adad0b5fb27fb373cb41c47ed7ab419af" prot="public" static="no">
        <name>LLAMA_FN_HOST_ACC_INLINE</name>
        <initializer>inline</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Some offloading parallelization language extensions such a CUDA, OpenACC or OpenMP 4.5 need to specify whether a class, struct, function or method &quot;resides&quot; on the host, the accelerator (the offloading device) or both. LLAMA supports this with marking every function wich would be needed on an accelerator with <computeroutput>LLAMA_FN_HOST_ACC_INLINE</computeroutput>. When using such a language (or e.g. <ulink url="https://github.com/ComputationalRadiationPhysics/alpaka">alpaka</ulink> ) the define can be redefined before including LLAMA, e.g. for alpaka: <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;alpaka/alpaka.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__CUDACC__</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>LLAMA_FN_HOST_ACC_INLINE<sp/>ALPAKA_FN_ACC<sp/>__forceinline__</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>LLAMA_FN_HOST_ACC_INLINE<sp/>ALPAKA_FN_ACC<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline><highlight class="preprocessor">#include<sp/>&lt;llama/llama.hpp&gt;</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" line="80" column="12" bodyfile="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8hpp_1affb1b2bdbbed82d386e8cf712cc7e4b5" prot="public" static="no">
        <name>LLAMA_NO_HOST_ACC_WARNING</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deactivates (wrong negative) warnings about calling host function in an offloading device (e.g. for CUDA). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" line="94" column="16" bodyfile="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8hpp_1a48abf2d81c1aac87ff87f95bb427049a" prot="public" static="no">
        <name>LLAMA_FORCE_INLINE_RECURSIVE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If possible forces the compiler to recursively inline the following function and all child function calls. Should be use carefully as at least the Intel compiler implementation seems to be buggy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" line="105" column="12" bodyfile="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8hpp_1ac5ebc32ab3b77b2abc6cc3f8c612b702" prot="public" static="no">
        <name>LLAMA_IF_DEBUG</name>
        <param><defname>x</defname></param>
        <initializer>x</initializer>
        <briefdescription>
<para>resolves to <computeroutput>x</computeroutput> if in debug mode otherwise ignores <computeroutput>x</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" line="110" column="12" bodyfile="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8hpp_1a100b24418a95976a001b8fac8a676b02" prot="public" static="no">
        <name>LLAMA_IF_RELEASE</name>
        <param><defname>x</defname></param>
        <briefdescription>
<para>resolves to <computeroutput>x</computeroutput> if <bold>not</bold> in debug mode otherwise ignores <computeroutput>x</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" line="112" column="12" bodyfile="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="macros_8hpp_1a84febcf0c516314cf4cc6923dccd5b2a" prot="public" static="no">
        <name>LLAMA_DEREFERENCE</name>
        <param><defname>x</defname></param>
        <initializer>decltype( x )( x )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" line="118" column="9" bodyfile="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>2018<sp/>Alexander<sp/>Matthes</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>LLAMA.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>LLAMA<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>LLAMA<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>License<sp/>along<sp/>with<sp/>LLAMA.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/predef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOST_COMP_INTEL<sp/>==<sp/>0<sp/>//<sp/>Work<sp/>around<sp/>for<sp/>broken<sp/>intel<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>defined(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ifdef<sp/>BOOST_COMP_INTEL_DETECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undef<sp/>BOOST_COMP_INTEL_DETECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_COMP_INTEL_DETECTION<sp/>BOOST_PREDEF_MAKE_10_VVRR(__INTEL_COMPILER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>defined(BOOST_COMP_INTEL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undef<sp/>BOOST_COMP_INTEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>BOOST_COMP_INTEL<sp/>BOOST_COMP_INTEL_DETECTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOST_COMP_GNUC<sp/>!=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_INDEPENDENT_DATA<sp/>_Pragma<sp/>(&quot;GCC<sp/>ivdep&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>BOOST_COMP_INTEL<sp/>!=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_INDEPENDENT_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma<sp/>(&quot;ivdep&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>BOOST_COMP_CLANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_INDEPENDENT_DATA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma<sp/>(&quot;clang<sp/>loop<sp/>vectorize(enable)&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma<sp/>(&quot;clang<sp/>loop<sp/>interleave(enable)&quot;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_Pragma<sp/>(&quot;clang<sp/>loop<sp/>distribute(enable)&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="macros_8hpp_1aa201f5c2567527b34eae5fbdab0e2416" refkind="member"><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_INDEPENDENT_DATA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LLAMA_FN_HOST_ACC_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="macros_8hpp_1adad0b5fb27fb373cb41c47ed7ab419af" refkind="member"><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_FN_HOST_ACC_INLINE<sp/>inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LLAMA_NO_HOST_ACC_WARNING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>__NVCC__<sp/>!=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>BOOST_COMP_MSVC<sp/>!=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>LLAMA_NO_HOST_ACC_WARNING<sp/>__pragma(hd_warning_disable)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>LLAMA_NO_HOST_ACC_WARNING<sp/>_Pragma(&quot;hd_warning_disable&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="macros_8hpp_1affb1b2bdbbed82d386e8cf712cc7e4b5" refkind="member"><highlight class="preprocessor">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>define<sp/>LLAMA_NO_HOST_ACC_WARNING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>BOOST_COMP_INTEL<sp/>!=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_FORCE_INLINE_RECURSIVE<sp/>_Pragma<sp/>(&quot;forceinline<sp/>recursive&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="macros_8hpp_1a48abf2d81c1aac87ff87f95bb427049a" refkind="member"><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_FORCE_INLINE_RECURSIVE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG)<sp/>||<sp/>!defined(NDEBUG)<sp/>||<sp/>defined(_DEBUG)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_IF_DEBUG(<sp/>x<sp/>)<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_IF_RELEASE(<sp/>x<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_IF_DEBUG(<sp/>x<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_IF_RELEASE(<sp/>x<sp/>)<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="macros_8hpp_1a84febcf0c516314cf4cc6923dccd5b2a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LLAMA_DEREFERENCE(<sp/>x<sp/>)<sp/>decltype(<sp/>x<sp/>)(<sp/>x<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LLAMA_IGNORE_LITERAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>LLAMA_IGNORE_LITERAL(<sp/>x<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/alexander/develop/work/llama/include/llama/preprocessor/macros.hpp"/>
  </compounddef>
</doxygen>
