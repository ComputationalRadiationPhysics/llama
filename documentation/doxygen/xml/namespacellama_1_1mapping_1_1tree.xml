<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacellama_1_1mapping_1_1tree" kind="namespace" language="C++">
    <compoundname>llama::mapping::tree</compoundname>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1Addition" prot="public">llama::mapping::tree::Addition</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1Addition_3_01std_1_1integral__constant_3_01T_00_01t1_01_4_00_0db9b0881a9379e353ba23b6a33833924" prot="public">llama::mapping::tree::Addition&lt; std::integral_constant&lt; T, t1 &gt;, std::integral_constant&lt; T, t2 &gt;&gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1Multiplication_3_01std_1_1integral__constant_3_01T_00_01t1_01_fc4ee335e5630e6d1de1f50c7e3bbdd5" prot="public">llama::mapping::tree::Multiplication&lt; std::integral_constant&lt; T, t1 &gt;, std::integral_constant&lt; T, t2 &gt;&gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1TreeElement_3_01T__Identifier_00_01T__Type_00_01std_1_1integrad76794eeebc34a3b631ae53ecd97fe27" prot="public">llama::mapping::tree::TreeElement&lt; T_Identifier, T_Type, std::integral_constant&lt; T_CountType, T_count &gt;&gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1TreeElement_3_01T__Identifier_00_01Tuple_3_01T__Childs_8_8_8_071664c06321531eea6aa16182b5373a5" prot="public">llama::mapping::tree::TreeElement&lt; T_Identifier, Tuple&lt; T_Childs... &gt;, std::integral_constant&lt; T_CountType, T_count &gt;&gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1TreeCoordElement_3_01T__compiletime_00_01std_1_1integral__cons1bd39fd27d8aa574e23951eaba3ed629" prot="public">llama::mapping::tree::TreeCoordElement&lt; T_compiletime, std::integral_constant&lt; T_RuntimeType, T_runtime &gt;&gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1Mapping" prot="public">llama::mapping::tree::Mapping</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1MergeFunctors" prot="public">llama::mapping::tree::MergeFunctors</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1Multiplication" prot="public">llama::mapping::tree::Multiplication</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1Reduce" prot="public">llama::mapping::tree::Reduce</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1Reduce_3_01T__Tree_00_01T__InnerOp_00_01T__OuterOp_00_01T__Lea193ef40a2643f774b28890de69da673e" prot="public">llama::mapping::tree::Reduce&lt; T_Tree, T_InnerOp, T_OuterOp, T_LeafFunctor, typename T_Tree::IsTreeElementWithoutChilds &gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1TreeOptimalType_3_01T__Childs_00_01std_1_1integral__constant_314f3f09a057997e2a2641537aa824b9e" prot="public">llama::mapping::tree::TreeOptimalType&lt; T_Childs, std::integral_constant&lt; std::size_t, T_count &gt;&gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1SizeOfFunctor" prot="public">llama::mapping::tree::SizeOfFunctor</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1ToString" prot="public">llama::mapping::tree::ToString</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1ToString_3_01NoName_01_4" prot="public">llama::mapping::tree::ToString&lt; NoName &gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1ToString_3_01T__Tree_00_01typename_01T__Tree_1_1IsTreeElementWithChilds_01_4" prot="public">llama::mapping::tree::ToString&lt; T_Tree, typename T_Tree::IsTreeElementWithChilds &gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1ToString_3_01T__Tree_00_01typename_01T__Tree_1_1IsTreeElementWithoutChilds_01_4" prot="public">llama::mapping::tree::ToString&lt; T_Tree, typename T_Tree::IsTreeElementWithoutChilds &gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1ToString_3_01Tuple_3_01T__First_01_4_01_4" prot="public">llama::mapping::tree::ToString&lt; Tuple&lt; T_First &gt; &gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1ToString_3_01Tuple_3_01T__First_00_01T__Second_00_01T__Rest_8_8_8_01_4_4" prot="public">llama::mapping::tree::ToString&lt; Tuple&lt; T_First, T_Second, T_Rest... &gt;&gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1TreeCoordElement" prot="public">llama::mapping::tree::TreeCoordElement</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1TreeElement" prot="public">llama::mapping::tree::TreeElement</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1TreeElement_3_01T__Identifier_00_01Tuple_3_01T__Childs_8_8_8_01_4_00_01T__CountType_01_4" prot="public">llama::mapping::tree::TreeElement&lt; T_Identifier, Tuple&lt; T_Childs... &gt;, T_CountType &gt;</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1TreeOptimalType" prot="public">llama::mapping::tree::TreeOptimalType</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1TreePopFrontChild" prot="public">llama::mapping::tree::TreePopFrontChild</innerclass>
    <innerclass refid="structllama_1_1mapping_1_1tree_1_1TreePopFrontChild_3_01TreeElementConst_3_01T__Identifier_00_01T__Type_00_01T__count_01_4_4" prot="public">llama::mapping::tree::TreePopFrontChild&lt; TreeElementConst&lt; T_Identifier, T_Type, T_count &gt;&gt;</innerclass>
    <innernamespace refid="namespacellama_1_1mapping_1_1tree_1_1functor">llama::mapping::tree::functor</innernamespace>
    <innernamespace refid="namespacellama_1_1mapping_1_1tree_1_1internal">llama::mapping::tree::internal</innernamespace>
    <innernamespace refid="namespacellama_1_1mapping_1_1tree_1_1operations">llama::mapping::tree::operations</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacellama_1_1mapping_1_1tree_1a2004748dcc6a4f19c45572724bf16532" prot="public" static="no">
        <type><ref refid="structllama_1_1mapping_1_1tree_1_1TreeCoordElement" kindref="compound">TreeCoordElement</ref>&lt; T_compiletime, std::integral_constant&lt; std::size_t, T_runtime &gt; &gt;</type>
        <definition>using llama::mapping::tree::TreeCoordElementConst = TreeCoordElement&lt; T_compiletime, std::integral_constant&lt; std::size_t, T_runtime &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TreeCoordElementConst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeCoord.hpp" line="87" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeCoord.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacellama_1_1mapping_1_1tree_1a0669b94ded40c60d0b30a824002fc200" prot="public" static="no">
        <type>typename <ref refid="structllama_1_1mapping_1_1tree_1_1internal_1_1TreeCoordFromCoords" kindref="compound">internal::TreeCoordFromCoords</ref>&lt; T_coords... &gt;::type</type>
        <definition>using llama::mapping::tree::TreeCoord = typename internal::TreeCoordFromCoords&lt; T_coords... &gt;::type</definition>
        <argsstring></argsstring>
        <name>TreeCoord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeCoord.hpp" line="128" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeCoord.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacellama_1_1mapping_1_1tree_1abaf634fb3e1a6278545bbaab4d599700" prot="public" static="no">
        <type><ref refid="structllama_1_1mapping_1_1tree_1_1TreeElement" kindref="compound">TreeElement</ref>&lt; T_Identifier, T_Type, std::integral_constant&lt; std::size_t, T_count &gt; &gt;</type>
        <definition>using llama::mapping::tree::TreeElementConst = TreeElement&lt; T_Identifier, T_Type, std::integral_constant&lt; std::size_t, T_count &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>TreeElementConst</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeElement.hpp" line="181" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeElement.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacellama_1_1mapping_1_1tree_1a75ddeae29d60ee0940a2aabf881d64c9" prot="public" static="no">
        <type>typename <ref refid="structllama_1_1mapping_1_1tree_1_1internal_1_1TreeFromDatumDomainImpl" kindref="compound">internal::TreeFromDatumDomainImpl</ref>&lt; T_DatumDomain &gt;::type</type>
        <definition>using llama::mapping::tree::TreeFromDatumDomain = typename internal::TreeFromDatumDomainImpl&lt; T_DatumDomain &gt;::type</definition>
        <argsstring></argsstring>
        <name>TreeFromDatumDomain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeFromDomains.hpp" line="139" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeFromDomains.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacellama_1_1mapping_1_1tree_1a257eba2e41a3508cc0d70fb0f9e30d24" prot="public" static="no">
        <type>typename <ref refid="structllama_1_1mapping_1_1tree_1_1internal_1_1TreeFromDomainsImpl" kindref="compound">internal::TreeFromDomainsImpl</ref>&lt; T_UserDomain, T_DatumDomain &gt;::type</type>
        <definition>using llama::mapping::tree::TreeFromDomains = typename internal::TreeFromDomainsImpl&lt; T_UserDomain, T_DatumDomain &gt;::type</definition>
        <argsstring></argsstring>
        <name>TreeFromDomains</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeFromDomains.hpp" line="147" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeFromDomains.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacellama_1_1mapping_1_1tree_1aab33b20c6c16e09a8388fe4fbed72970" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Tree</type>
          </param>
          <param>
            <type>typename T_TreeCoord</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::mapping::tree::getTreeBlobByte</definition>
        <argsstring>(T_Tree const &amp;tree, T_TreeCoord const &amp;treeCoord) -&gt; std::size_t</argsstring>
        <name>getTreeBlobByte</name>
        <param>
          <type>T_Tree const &amp;</type>
          <declname>tree</declname>
        </param>
        <param>
          <type>T_TreeCoord const &amp;</type>
          <declname>treeCoord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/GetBlobByte.hpp" line="166" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/GetBlobByte.hpp" bodystart="166" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespacellama_1_1mapping_1_1tree_1ab161497672b2066e11efa08d9a9cec8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Childs</type>
          </param>
          <param>
            <type>typename T_CountType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::mapping::tree::getTreeBlobSize</definition>
        <argsstring>(T_Childs const &amp;childs, T_CountType const &amp;count) -&gt; std::size_t</argsstring>
        <name>getTreeBlobSize</name>
        <param>
          <type>T_Childs const &amp;</type>
          <declname>childs</declname>
        </param>
        <param>
          <type>T_CountType const &amp;</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/GetBlobSize.hpp" line="54" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/GetBlobSize.hpp" bodystart="54" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespacellama_1_1mapping_1_1tree_1a7ed1f39556becae9a3c0409513e2dca5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Tree</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::mapping::tree::getTreeBlobSize</definition>
        <argsstring>(T_Tree const &amp;tree) -&gt; std::size_t</argsstring>
        <name>getTreeBlobSize</name>
        <param>
          <type>T_Tree const &amp;</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/GetBlobSize.hpp" line="77" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/GetBlobSize.hpp" bodystart="77" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespacellama_1_1mapping_1_1tree_1a1128aa29081d1abe0b3b8f5282a9e60c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Tree</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::mapping::tree::toString</definition>
        <argsstring>(T_Tree tree) -&gt; std::string</argsstring>
        <name>toString</name>
        <param>
          <type>T_Tree</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/toString.hpp" line="181" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/toString.hpp" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="namespacellama_1_1mapping_1_1tree_1a45079949cfd7d370acea280b1b04159f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_TreeCoord</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::mapping::tree::treeCoordToString</definition>
        <argsstring>(const T_TreeCoord treeCoord) -&gt; std::string</argsstring>
        <name>treeCoordToString</name>
        <param>
          <type>const T_TreeCoord</type>
          <declname>treeCoord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeCoord.hpp" line="168" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeCoord.hpp" bodystart="168" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="namespacellama_1_1mapping_1_1tree_1a6c94d5fae399cb0b0d3c7e095862dc04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_DatumDomain</type>
          </param>
          <param>
            <type>typename T_UserDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::mapping::tree::setUserDomainInTree</definition>
        <argsstring>(T_UserDomain const &amp;size) -&gt; decltype(internal::SetUserDomainInTreeImpl&lt; T_DatumDomain, T_UserDomain &gt;()(size))</argsstring>
        <name>setUserDomainInTree</name>
        <param>
          <type>T_UserDomain const &amp;</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeFromDomains.hpp" line="239" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeFromDomains.hpp" bodystart="239" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="namespacellama_1_1mapping_1_1tree_1aa95d8ba9cd9d81d94605a932011d7a4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_DatumCoord</type>
          </param>
          <param>
            <type>typename T_UserDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::mapping::tree::getBasicTreeCoordFromDomains</definition>
        <argsstring>(T_UserDomain const &amp;coord) -&gt; decltype(tupleCat(internal::UserDomainToTreeCoord&lt; T_UserDomain, T_DatumCoord::front &gt;()(coord), typename internal::DatumCoordToTreeCoord&lt; T_DatumCoord &gt;::type()))</argsstring>
        <name>getBasicTreeCoordFromDomains</name>
        <param>
          <type>T_UserDomain const &amp;</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeFromDomains.hpp" line="356" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/mapping/tree/TreeFromDomains.hpp" bodystart="356" bodyend="374"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alexander/develop/work/llama/include/llama/mapping/tree/ForEach.hpp" line="30" column="1"/>
  </compounddef>
</doxygen>
