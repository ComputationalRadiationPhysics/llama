<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structcommon_1_1allocator_1_1Alpaka" kind="struct" language="C++" prot="public">
    <compoundname>common::allocator::Alpaka</compoundname>
    <includes refid="AlpakaAllocator_8hpp" local="no">AlpakaAllocator.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T_DevAcc</type>
      </param>
      <param>
        <type>typename T_Size</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcommon_1_1allocator_1_1Alpaka_1a69f809e5188d6d2570e88661434421a4" prot="public" static="no">
        <type>T_DevAcc</type>
        <definition>using common::allocator::Alpaka::DevAcc =  T_DevAcc</definition>
        <argsstring></argsstring>
        <name>DevAcc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="64" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcommon_1_1allocator_1_1Alpaka_1a98bb0b62aafe6840a0f7be48d065ba26" prot="public" static="no">
        <type>T_Size</type>
        <definition>using common::allocator::Alpaka::Size =  T_Size</definition>
        <argsstring></argsstring>
        <name>Size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="65" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcommon_1_1allocator_1_1Alpaka_1a35e8c77e7d9559473dfcf65e8bb8cd0f" prot="public" static="no">
        <type>alpaka::mem::buf::Buf&lt; <ref refid="structcommon_1_1allocator_1_1Alpaka_1a69f809e5188d6d2570e88661434421a4" kindref="member">DevAcc</ref>, unsigned char, alpaka::dim::DimInt&lt; 1 &gt;, <ref refid="structcommon_1_1allocator_1_1Alpaka_1a98bb0b62aafe6840a0f7be48d065ba26" kindref="member">Size</ref> &gt;</type>
        <definition>using common::allocator::Alpaka::BufferType =  alpaka::mem::buf::Buf&lt; DevAcc, unsigned char, alpaka::dim::DimInt&lt; 1 &gt;, Size &gt;</definition>
        <argsstring></argsstring>
        <name>BufferType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="67" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcommon_1_1allocator_1_1Alpaka_1a2c8a31a76ffde16ee246f0e7bcec3be6" prot="public" static="no">
        <type><ref refid="structcommon_1_1allocator_1_1internal_1_1AlpakaAccessor" kindref="compound">internal::AlpakaAccessor</ref>&lt; <ref refid="structcommon_1_1allocator_1_1Alpaka_1a35e8c77e7d9559473dfcf65e8bb8cd0f" kindref="member">BufferType</ref> &gt;</type>
        <definition>using common::allocator::Alpaka::BlobType =  internal::AlpakaAccessor&lt; BufferType &gt;</definition>
        <argsstring></argsstring>
        <name>BlobType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>blob type of this allocator is an internal accessor the the alpaka buffer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="76" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcommon_1_1allocator_1_1Alpaka_1a31665d764dc604c08676d51b035daffe" prot="public" static="no">
        <type>typename <ref refid="structcommon_1_1allocator_1_1internal_1_1AlpakaAccessor_1aefeec8a406b1163b41c9970943d27101" kindref="member">BlobType::PrimType</ref></type>
        <definition>using common::allocator::Alpaka::PrimType =  typename BlobType::PrimType</definition>
        <argsstring></argsstring>
        <name>PrimType</name>
        <briefdescription>
<para>primary type of this allocator is <computeroutput>unsigned char</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="78" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcommon_1_1allocator_1_1Alpaka_1a58e2a97ee756dcb57cfbefbe1dcb07cc" prot="public" static="no">
        <type><ref refid="structcommon_1_1allocator_1_1Alpaka_1a69f809e5188d6d2570e88661434421a4" kindref="member">DevAcc</ref></type>
        <definition>using common::allocator::Alpaka::Parameter =  DevAcc</definition>
        <argsstring></argsstring>
        <name>Parameter</name>
        <briefdescription>
<para>the parameter is the alpaka <computeroutput>DevAcc</computeroutput> instance </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="80" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structcommon_1_1allocator_1_1Alpaka_1ad04d2a1ece71752dddc16de9aaa0f7dd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>static auto common::allocator::Alpaka&lt; T_DevAcc, T_Size &gt;::allocate</definition>
        <argsstring>(std::size_t count, Parameter devAcc) -&gt; BlobType</argsstring>
        <name>allocate</name>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="structcommon_1_1allocator_1_1Alpaka_1a58e2a97ee756dcb57cfbefbe1dcb07cc" kindref="member">Parameter</ref></type>
          <declname>devAcc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="84" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="84" bodyend="103"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Allocator to allocate memory for a <ref refid="structllama_1_1View" kindref="compound">llama::View</ref> in the <ref refid="structllama_1_1Factory" kindref="compound">llama::Factory</ref> using <computeroutput>alpaka::mem::buf::Buf</computeroutput> in the background. The view created with this allocator can only be used on the host side. For the use of the view on the device see <ref refid="structcommon_1_1allocator_1_1AlpakaMirror" kindref="compound">AlpakaMirror</ref>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_DevAcc</parametername>
</parameternamelist>
<parameterdescription>
<para>alpaka <computeroutput>DevAcc</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_Size</parametername>
</parameternamelist>
<parameterdescription>
<para>alpaka size type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structcommon_1_1allocator_1_1AlpakaMirror" kindref="compound">AlpakaMirror</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="63" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="62" bodyend="104"/>
    <listofallmembers>
      <member refid="structcommon_1_1allocator_1_1Alpaka_1ad04d2a1ece71752dddc16de9aaa0f7dd" prot="public" virt="non-virtual"><scope>common::allocator::Alpaka</scope><name>allocate</name></member>
      <member refid="structcommon_1_1allocator_1_1Alpaka_1a2c8a31a76ffde16ee246f0e7bcec3be6" prot="public" virt="non-virtual"><scope>common::allocator::Alpaka</scope><name>BlobType</name></member>
      <member refid="structcommon_1_1allocator_1_1Alpaka_1a35e8c77e7d9559473dfcf65e8bb8cd0f" prot="public" virt="non-virtual"><scope>common::allocator::Alpaka</scope><name>BufferType</name></member>
      <member refid="structcommon_1_1allocator_1_1Alpaka_1a69f809e5188d6d2570e88661434421a4" prot="public" virt="non-virtual"><scope>common::allocator::Alpaka</scope><name>DevAcc</name></member>
      <member refid="structcommon_1_1allocator_1_1Alpaka_1a58e2a97ee756dcb57cfbefbe1dcb07cc" prot="public" virt="non-virtual"><scope>common::allocator::Alpaka</scope><name>Parameter</name></member>
      <member refid="structcommon_1_1allocator_1_1Alpaka_1a31665d764dc604c08676d51b035daffe" prot="public" virt="non-virtual"><scope>common::allocator::Alpaka</scope><name>PrimType</name></member>
      <member refid="structcommon_1_1allocator_1_1Alpaka_1a98bb0b62aafe6840a0f7be48d065ba26" prot="public" virt="non-virtual"><scope>common::allocator::Alpaka</scope><name>Size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
