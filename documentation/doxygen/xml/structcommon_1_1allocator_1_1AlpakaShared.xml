<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structcommon_1_1allocator_1_1AlpakaShared" kind="struct" language="C++" prot="public">
    <compoundname>common::allocator::AlpakaShared</compoundname>
    <includes refid="AlpakaAllocator_8hpp" local="no">AlpakaAllocator.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T_Acc</type>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>T_count</declname>
        <defname>T_count</defname>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>T_uniqueID</declname>
        <defname>T_uniqueID</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structcommon_1_1allocator_1_1AlpakaShared_1ac3945530f7b8229a1c665c5d3105c079" prot="public" static="no">
        <type>unsigned char *</type>
        <definition>using common::allocator::AlpakaShared::BlobType =  unsigned char*</definition>
        <argsstring></argsstring>
        <name>BlobType</name>
        <briefdescription>
<para>blob type of this allocator is <computeroutput>unsigned char*</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="170" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcommon_1_1allocator_1_1AlpakaShared_1a2afddc8df57256a6f43e6916ddde0562" prot="public" static="no">
        <type>unsigned char</type>
        <definition>using common::allocator::AlpakaShared::PrimType =  unsigned char</definition>
        <argsstring></argsstring>
        <name>PrimType</name>
        <briefdescription>
<para>primary type of this allocator is <computeroutput>unsigned char</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="172" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcommon_1_1allocator_1_1AlpakaShared_1aefffd36241f10a57e1a5a821ebc8690c" prot="public" static="no">
        <type>T_Acc</type>
        <definition>using common::allocator::AlpakaShared::Parameter =  T_Acc</definition>
        <argsstring></argsstring>
        <name>Parameter</name>
        <briefdescription>
<para>the allocation parameter is the alpaka <computeroutput>Acc</computeroutput> type of the kernel </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="174" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structcommon_1_1allocator_1_1AlpakaShared_1ab6e16c91640b36c7e7c90f4d5494ba3e" prot="public" static="no">
        <type><ref refid="structcommon_1_1allocator_1_1AlpakaShared_1a2afddc8df57256a6f43e6916ddde0562" kindref="member">PrimType</ref>[T_count]</type>
        <definition>using common::allocator::AlpakaShared::AllocType =  PrimType[ T_count ]</definition>
        <argsstring></argsstring>
        <name>AllocType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="175" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structcommon_1_1allocator_1_1AlpakaShared_1a9849d367f4ce996c06bc6104a79543b5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="macros_8hpp_1adad0b5fb27fb373cb41c47ed7ab419af" kindref="member">LLAMA_FN_HOST_ACC_INLINE</ref> auto</type>
        <definition>static LLAMA_FN_HOST_ACC_INLINE auto common::allocator::AlpakaShared&lt; T_Acc, T_count, T_uniqueID &gt;::allocate</definition>
        <argsstring>(std::size_t count, Parameter const &amp;acc) -&gt; BlobType</argsstring>
        <name>allocate</name>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="structcommon_1_1allocator_1_1AlpakaShared_1aefffd36241f10a57e1a5a821ebc8690c" kindref="member">Parameter</ref> const &amp;</type>
          <declname>acc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="180" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="180" bodyend="191"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Allocator to allocate memory for a <ref refid="structllama_1_1View" kindref="compound">llama::View</ref> in the <ref refid="structllama_1_1Factory" kindref="compound">llama::Factory</ref> using alpaka shared memory in the background. The view created with this allocator can only be used on the view side as share memory exists only there. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Acc</parametername>
</parameternamelist>
<parameterdescription>
<para>alpaka <computeroutput>Acc</computeroutput> type of the kernel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of memory needed in byte like needed for <ref refid="structllama_1_1allocator_1_1Stack" kindref="compound">llama::allocator::Stack</ref> at compile time. In the future this may change and be a run time parameter (at least for dynamic shared memory allocation). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_uniqueID</parametername>
</parameternamelist>
<parameterdescription>
<para>at compile time unique ID needed by alpaka, best is to use e.g. <computeroutput>__COUNTER__</computeroutput> which is always unique as it increases after each use while preprocessing the code. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structllama_1_1allocator_1_1Stack" kindref="compound">llama::allocator::Stack</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" line="168" column="1" bodyfile="/home/alexander/develop/work/llama/examples/common/AlpakaAllocator.hpp" bodystart="167" bodyend="192"/>
    <listofallmembers>
      <member refid="structcommon_1_1allocator_1_1AlpakaShared_1a9849d367f4ce996c06bc6104a79543b5" prot="public" virt="non-virtual"><scope>common::allocator::AlpakaShared</scope><name>allocate</name></member>
      <member refid="structcommon_1_1allocator_1_1AlpakaShared_1ab6e16c91640b36c7e7c90f4d5494ba3e" prot="public" virt="non-virtual"><scope>common::allocator::AlpakaShared</scope><name>AllocType</name></member>
      <member refid="structcommon_1_1allocator_1_1AlpakaShared_1ac3945530f7b8229a1c665c5d3105c079" prot="public" virt="non-virtual"><scope>common::allocator::AlpakaShared</scope><name>BlobType</name></member>
      <member refid="structcommon_1_1allocator_1_1AlpakaShared_1aefffd36241f10a57e1a5a821ebc8690c" prot="public" virt="non-virtual"><scope>common::allocator::AlpakaShared</scope><name>Parameter</name></member>
      <member refid="structcommon_1_1allocator_1_1AlpakaShared_1a2afddc8df57256a6f43e6916ddde0562" prot="public" virt="non-virtual"><scope>common::allocator::AlpakaShared</scope><name>PrimType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
