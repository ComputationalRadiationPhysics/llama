<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structllama_1_1Array" kind="struct" language="C++" prot="public">
    <compoundname>llama::Array</compoundname>
    <includes refid="Array_8hpp" local="no">Array.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>T_dim</declname>
        <defname>T_dim</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structllama_1_1Array_1a77d5b390bfc75eb0674ee5f6ffd9a672" prot="public" static="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t llama::Array::count</definition>
        <argsstring></argsstring>
        <name>count</name>
        <initializer>= T_dim</initializer>
        <briefdescription>
<para>Number of elements in array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="37" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structllama_1_1Array_1a1a94edc9cb79e022057a890ef1438bcd" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T llama::Array::element[count]</definition>
        <argsstring>[count]</argsstring>
        <name>element</name>
        <briefdescription>
<para>Elements in the array, best to access with <ref refid="structllama_1_1Array_1a0dcab88a7f21345bdcdf6ef861d6bd4d" kindref="member">operator[]</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="45" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structllama_1_1Array_1a77f2703389596822c5904932a3aab372" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::Array::Array</definition>
        <argsstring>()=default</argsstring>
        <name>Array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1a4a99c9accd41220a3d85884542cc618a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::Array::Array</definition>
        <argsstring>(Array const &amp;)=default</argsstring>
        <name>Array</name>
        <param>
          <type><ref refid="structllama_1_1Array" kindref="compound">Array</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1a4c63dd11e2fb6063f5ea7a0aaf34dd87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::Array::Array</definition>
        <argsstring>(Array &amp;&amp;)=default</argsstring>
        <name>Array</name>
        <param>
          <type><ref refid="structllama_1_1Array" kindref="compound">Array</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1aa1072cddbe999dd93d0f50d933748091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::Array::~Array</definition>
        <argsstring>()=default</argsstring>
        <name>~Array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1a62a903722c2fa12eb27535159e6efd5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* llama::Array::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the first element. Basically just a pointer to the internal array of elements, which can be incremented. <simplesect kind="return"><para>pointer to first element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="52" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1a421097ae5f2571a31ac9d2ae5cc0364a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* llama::Array::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns an iterator to the element after the last element. <simplesect kind="return"><para>pointer to element after the last element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="61" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1a0dcab88a7f21345bdcdf6ef861d6bd4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_IndexType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::Array::operator[]</definition>
        <argsstring>(T_IndexType &amp;&amp;idx) -&gt; T &amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>T_IndexType &amp;&amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gives access to an element of the array <emphasis>without</emphasis> range check. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_IndexType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of index </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to element at index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="74" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1a6362e5f8d9dfe53eec86ca465cbd0b33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_IndexType</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto llama::Array::operator[]</definition>
        <argsstring>(T_IndexType &amp;&amp;idx) const -&gt; T const &amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>T_IndexType &amp;&amp;</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gives const access to an element of the array <emphasis>without</emphasis> range check. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_IndexType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of index </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index of element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const reference to element at index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="89" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="89" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1a486933c16d5b1fe95c7ef2b131a97511" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::Array::pop_front</definition>
        <argsstring>() const -&gt; Array&lt; T, count-1 &gt;</argsstring>
        <name>pop_front</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the array but with the first element removed. <simplesect kind="return"><para><ref refid="structllama_1_1Array" kindref="compound">Array</ref> with one element less </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="100" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="100" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1a8af3020e5e1e24f9c6c91e0909493872" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::Array::pop_back</definition>
        <argsstring>() const -&gt; Array&lt; T, count-1 &gt;</argsstring>
        <name>pop_back</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the array but with the last element removed. <simplesect kind="return"><para><ref refid="structllama_1_1Array" kindref="compound">Array</ref> with one element less </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="120" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="120" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1a07f1108f0c3f94541ff72eaa7dfdb335" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::Array::push_front</definition>
        <argsstring>(T const new_element) const -&gt; Array&lt; T, count+1 &gt;</argsstring>
        <name>push_front</name>
        <param>
          <type>T const</type>
          <declname>new_element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the array but with the one element added in front of the (former) first element. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_element</parametername>
</parameternamelist>
<parameterdescription>
<para>new element of type T to add at the beginning </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structllama_1_1Array" kindref="compound">Array</ref> with one element more </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="142" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="142" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1ad280fec506e1d72c80b662e9126bf673" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::Array::push_back</definition>
        <argsstring>(T const new_element) const -&gt; Array&lt; T, count+1 &gt;</argsstring>
        <name>push_back</name>
        <param>
          <type>T const</type>
          <declname>new_element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a copy of the array but with the one element added after the (former) last element. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_element</parametername>
</parameternamelist>
<parameterdescription>
<para>new element of type T to add at the end </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structllama_1_1Array" kindref="compound">Array</ref> with one element more </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="165" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="165" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1a3ab27d1e486fbe1c55fcbc360323edb7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Other</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::Array::operator==</definition>
        <argsstring>(const T_Other &amp;other) const -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type>const T_Other &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether two arrays are elementwise the same. Returns false if at least one pair of elements with the same index in both arrays are not the same. Returns always false for arrays of different sizes. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Other</parametername>
</parameternamelist>
<parameterdescription>
<para>type of other arrays. The type of the elements of the other array may differ and the operator still return true (e.g. for int and char). </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>other array to compare with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the arrays are the same, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="193" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="193" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1Array_1a73bc258a52b920b6ac47962d6f4cfd47" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Other</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::Array::operator+</definition>
        <argsstring>(const T_Other &amp;second) const -&gt; Array</argsstring>
        <name>operator+</name>
        <param>
          <type>const T_Other &amp;</type>
          <declname>second</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds an array to an existing array. May access invalid memory if the second array is smaller than the first! <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Other</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the other array. The types of the elements of the arrays may differ. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>second</parametername>
</parameternamelist>
<parameterdescription>
<para>other array to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new array of the same type as the first array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="214" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="214" bodyend="221"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><ref refid="structllama_1_1Array" kindref="compound">Array</ref> class like <computeroutput>std::array</computeroutput> but suitable for use with offloading devices like GPUs and extended with some (for LLAMA) useful methods. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type if array elements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_dim</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements in array </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="38">
        <label>T</label>
      </node>
      <node id="37">
        <label>llama::Array&lt; T, T_dim &gt;</label>
        <link refid="structllama_1_1Array"/>
        <childnode refid="38" relation="usage">
          <edgelabel>element</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/alexander/develop/work/llama/include/llama/Array.hpp" line="35" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/Array.hpp" bodystart="34" bodyend="222"/>
    <listofallmembers>
      <member refid="structllama_1_1Array_1a77f2703389596822c5904932a3aab372" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>Array</name></member>
      <member refid="structllama_1_1Array_1a4a99c9accd41220a3d85884542cc618a" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>Array</name></member>
      <member refid="structllama_1_1Array_1a4c63dd11e2fb6063f5ea7a0aaf34dd87" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>Array</name></member>
      <member refid="structllama_1_1Array_1a62a903722c2fa12eb27535159e6efd5c" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>begin</name></member>
      <member refid="structllama_1_1Array_1a77d5b390bfc75eb0674ee5f6ffd9a672" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>count</name></member>
      <member refid="structllama_1_1Array_1a1a94edc9cb79e022057a890ef1438bcd" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>element</name></member>
      <member refid="structllama_1_1Array_1a421097ae5f2571a31ac9d2ae5cc0364a" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>end</name></member>
      <member refid="structllama_1_1Array_1a73bc258a52b920b6ac47962d6f4cfd47" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>operator+</name></member>
      <member refid="structllama_1_1Array_1a3ab27d1e486fbe1c55fcbc360323edb7" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>operator==</name></member>
      <member refid="structllama_1_1Array_1a0dcab88a7f21345bdcdf6ef861d6bd4d" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>operator[]</name></member>
      <member refid="structllama_1_1Array_1a6362e5f8d9dfe53eec86ca465cbd0b33" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>operator[]</name></member>
      <member refid="structllama_1_1Array_1a8af3020e5e1e24f9c6c91e0909493872" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>pop_back</name></member>
      <member refid="structllama_1_1Array_1a486933c16d5b1fe95c7ef2b131a97511" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>pop_front</name></member>
      <member refid="structllama_1_1Array_1ad280fec506e1d72c80b662e9126bf673" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>push_back</name></member>
      <member refid="structllama_1_1Array_1a07f1108f0c3f94541ff72eaa7dfdb335" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>push_front</name></member>
      <member refid="structllama_1_1Array_1aa1072cddbe999dd93d0f50d933748091" prot="public" virt="non-virtual"><scope>llama::Array</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
