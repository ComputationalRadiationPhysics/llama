<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structllama_1_1ForEach" kind="struct" language="C++" prot="public">
    <compoundname>llama::ForEach</compoundname>
    <includes refid="ForEach_8hpp" local="no">ForEach.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T_DatumDomain</type>
      </param>
      <param>
        <type>typename T_DatumCoordOrFirstUID</type>
        <defval><ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref> &lt; &gt;</defval>
      </param>
      <param>
        <type>typename...</type>
        <declname>T_RestUID</declname>
        <defname>T_RestUID</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structllama_1_1ForEach_1a679a6ba62fb600e9b2473c7e07f5b5d2" prot="public" static="no">
        <type><ref refid="namespacellama_1a3953132518a1c5bd14cbacc8107975db" kindref="member">GetCoordFromUID</ref>&lt; T_DatumDomain, T_DatumCoordOrFirstUID, T_RestUID... &gt;</type>
        <definition>using llama::ForEach&lt; T_DatumDomain, T_DatumCoordOrFirstUID, T_RestUID &gt;::T_DatumCoord =  GetCoordFromUID&lt; T_DatumDomain, T_DatumCoordOrFirstUID, T_RestUID... &gt;</definition>
        <argsstring></argsstring>
        <name>T_DatumCoord</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/ForEach.hpp" line="274" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/ForEach.hpp" bodystart="278" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structllama_1_1ForEach_1ac384ec94baa84885d622204564831a76" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_Functor</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void llama::ForEach&lt; T_DatumDomain, T_DatumCoordOrFirstUID, T_RestUID &gt;::apply</definition>
        <argsstring>(T_Functor &amp;&amp;functor)</argsstring>
        <name>apply</name>
        <param>
          <type>T_Functor &amp;&amp;</type>
          <declname>functor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Applies the given functor to the given (part of the) datum domain. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Functor</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the functor </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>functor</parametername>
</parameternamelist>
<parameterdescription>
<para>the perfectly forwarded functor </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/ForEach.hpp" line="285" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/ForEach.hpp" bodystart="285" bodyend="292"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Can be used to access a given functor for every leaf in a datum domain given as <ref refid="namespacellama_1ad26ae6be4743f60f2379618d9bfb7cb0" kindref="member">DatumStruct</ref>. Basically a helper function to iterate over a datum domain at compile time without the need to recursively iterate yourself. The given functor needs to implement the operator() with two template parameters for the outer and the inner coordinate in the datum domain tree. These coordinates are both a <ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref> , which can be concatenated to one coordinate with <ref refid="structllama_1_1DatumCoord_1a39b3964205ce2787bc9f93764cc18ed2" kindref="member">DatumCoord::Cat</ref> and used to access the data. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_DatumDomain</parametername>
</parameternamelist>
<parameterdescription>
<para>the datum domain (<ref refid="namespacellama_1ad26ae6be4743f60f2379618d9bfb7cb0" kindref="member">DatumStruct</ref>) to iterate over </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_DatumCoordOrFirstUID</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref> or a UID to address the start node inside the datum domain tree. Will be given to the functor as <ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref> as first template parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_RestUID...</parametername>
</parameternamelist>
<parameterdescription>
<para>optional further UIDs for addressing the start node </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/alexander/develop/work/llama/include/llama/ForEach.hpp" line="273" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/ForEach.hpp" bodystart="272" bodyend="293"/>
    <listofallmembers>
      <member refid="structllama_1_1ForEach_1ac384ec94baa84885d622204564831a76" prot="public" virt="non-virtual"><scope>llama::ForEach</scope><name>apply</name></member>
      <member refid="structllama_1_1ForEach_1a679a6ba62fb600e9b2473c7e07f5b5d2" prot="public" virt="non-virtual"><scope>llama::ForEach</scope><name>T_DatumCoord</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
