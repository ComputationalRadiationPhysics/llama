<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structllama_1_1View" kind="struct" language="C++" prot="public">
    <compoundname>llama::View</compoundname>
    <includes refid="View_8hpp" local="no">View.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T_Mapping</type>
      </param>
      <param>
        <type>typename T_BlobType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structllama_1_1View_1a93aa3bf8757929f678b73e0e01e92ee9" prot="public" static="no">
        <type>T_BlobType</type>
        <definition>using llama::View&lt; T_Mapping, T_BlobType &gt;::BlobType =  T_BlobType</definition>
        <argsstring></argsstring>
        <name>BlobType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="730" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1View_1a674140b83f2489c3695e9fafb0bfc207" prot="public" static="no">
        <type>T_Mapping</type>
        <definition>using llama::View&lt; T_Mapping, T_BlobType &gt;::Mapping =  T_Mapping</definition>
        <argsstring></argsstring>
        <name>Mapping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="731" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1View_1a0fe0208a4618b9b41881f18e0d1c32f7" prot="public" static="no">
        <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; <ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; <ref refid="structllama_1_1View_1a674140b83f2489c3695e9fafb0bfc207" kindref="member">Mapping</ref>, <ref refid="structllama_1_1View_1a93aa3bf8757929f678b73e0e01e92ee9" kindref="member">BlobType</ref> &gt; &gt;</type>
        <definition>using llama::View&lt; T_Mapping, T_BlobType &gt;::VirtualDatumType =  VirtualDatum&lt; View &lt; Mapping, BlobType &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>VirtualDatumType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="732" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="737" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structllama_1_1View_1a7426dad7ef36d24058223d98263f3b9a" prot="public" static="no" mutable="no">
        <type>const <ref refid="structllama_1_1View_1a674140b83f2489c3695e9fafb0bfc207" kindref="member">Mapping</ref></type>
        <definition>const Mapping llama::View&lt; T_Mapping, T_BlobType &gt;::mapping</definition>
        <argsstring></argsstring>
        <name>mapping</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="883" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="883" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structllama_1_1View_1a165e82970b5d8e51aa4814f805ff3c28" prot="public" static="no" mutable="no">
        <type><ref refid="structllama_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="structllama_1_1View_1a93aa3bf8757929f678b73e0e01e92ee9" kindref="member">BlobType</ref>, Mapping::blobCount &gt;</type>
        <definition>Array&lt; BlobType, Mapping::blobCount &gt; llama::View&lt; T_Mapping, T_BlobType &gt;::blob</definition>
        <argsstring></argsstring>
        <name>blob</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="887" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="887" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structllama_1_1View_1ab230f4f9c30c26a60827b490ebd0479c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::View&lt; T_Mapping, T_BlobType &gt;::View</definition>
        <argsstring>()=default</argsstring>
        <name>View</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="739" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1View_1a8d3fda64c6b75514e8c1ba335869e3ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::View&lt; T_Mapping, T_BlobType &gt;::View</definition>
        <argsstring>(View const &amp;)=default</argsstring>
        <name>View</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1View_1afd9c19de4a6d957c1248533cba0bde01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::View&lt; T_Mapping, T_BlobType &gt;::View</definition>
        <argsstring>(View &amp;&amp;)=default</argsstring>
        <name>View</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="741" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1View_1abd530075c6464525fce1d79a7ccd7cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::View&lt; T_Mapping, T_BlobType &gt;::~View</definition>
        <argsstring>()=default</argsstring>
        <name>~View</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="742" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1View_1adc8280be97d67fe2358b78ce0c5a120c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>llama::View&lt; T_Mapping, T_BlobType &gt;::View</definition>
        <argsstring>(Mapping mapping, Array&lt; BlobType, Mapping::blobCount &gt; blob)</argsstring>
        <name>View</name>
        <param>
          <type><ref refid="structllama_1_1View_1a674140b83f2489c3695e9fafb0bfc207" kindref="member">Mapping</ref></type>
          <declname>mapping</declname>
        </param>
        <param>
          <type><ref refid="structllama_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="structllama_1_1View_1a93aa3bf8757929f678b73e0e01e92ee9" kindref="member">BlobType</ref>, Mapping::blobCount &gt;</type>
          <declname>blob</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="746" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="746" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1View_1a583df1438f7e33bd42b9f501f5705383" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>T_coords</declname>
            <defname>T_coords</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::View&lt; T_Mapping, T_BlobType &gt;::accessor</definition>
        <argsstring>(typename Mapping::UserDomain const userDomain) -&gt; GetType&lt; typename Mapping::DatumDomain, T_coords... &gt; &amp;</argsstring>
        <name>accessor</name>
        <param>
          <type>typename Mapping::UserDomain const</type>
          <declname>userDomain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="761" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="761" bodyend="779"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1View_1a0435dd4f93746054745de12c42857790" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_UIDs</declname>
            <defname>T_UIDs</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::View&lt; T_Mapping, T_BlobType &gt;::accessor</definition>
        <argsstring>(typename Mapping::UserDomain const userDomain) -&gt; GetTypeFromDatumCoord&lt; typename Mapping::DatumDomain, GetCoordFromUID&lt; typename Mapping::DatumDomain, T_UIDs... &gt; &gt; &amp;</argsstring>
        <name>accessor</name>
        <param>
          <type>typename Mapping::UserDomain const</type>
          <declname>userDomain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="785" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="785" bodyend="815"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1View_1ac962556be2456999f924b3a7a020be38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::View&lt; T_Mapping, T_BlobType &gt;::operator()</definition>
        <argsstring>(typename Mapping::UserDomain const userDomain) -&gt; VirtualDatumType</argsstring>
        <name>operator()</name>
        <param>
          <type>typename Mapping::UserDomain const</type>
          <declname>userDomain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="819" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="819" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1View_1a71f883c4edd040ed979a0c7d820aeeeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_Coord</declname>
            <defname>T_Coord</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::View&lt; T_Mapping, T_BlobType &gt;::operator()</definition>
        <argsstring>(T_Coord... coord) -&gt; VirtualDatumType</argsstring>
        <name>operator()</name>
        <param>
          <type>T_Coord...</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="832" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="832" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1View_1a496b290b371265664a4af20b55c01320" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_Coord</declname>
            <defname>T_Coord</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::View&lt; T_Mapping, T_BlobType &gt;::operator()</definition>
        <argsstring>(T_Coord... coord) const -&gt; const VirtualDatumType</argsstring>
        <name>operator()</name>
        <param>
          <type>T_Coord...</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="845" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="845" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1View_1ad0294119f8d577dd2e1eeb7dcd608e6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::View&lt; T_Mapping, T_BlobType &gt;::operator()</definition>
        <argsstring>(std::size_t coord=0) -&gt; VirtualDatumType</argsstring>
        <name>operator()</name>
        <param>
          <type>std::size_t</type>
          <declname>coord</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="857" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="857" bodyend="865"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1View_1a60065a34e0031eb9e257b9b53254d764" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>T_coord</declname>
            <defname>T_coord</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::View&lt; T_Mapping, T_BlobType &gt;::operator()</definition>
        <argsstring>(DatumCoord&lt; T_coord... &gt; &amp;&amp;dc=DatumCoord&lt; T_coord... &gt;()) -&gt; GetType&lt; typename Mapping::DatumDomain, T_coord... &gt; &amp;</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref>&lt; T_coord... &gt; &amp;&amp;</type>
          <declname>dc</declname>
          <defval><ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref>&lt; T_coord... &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="870" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="870" bodyend="880"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="423">
        <label>llama::Array&lt; BlobType, Mapping::blobCount &gt;</label>
        <link refid="structllama_1_1Array"/>
      </node>
      <node id="422">
        <label>llama::View&lt; T_Mapping, T_BlobType &gt;</label>
        <link refid="structllama_1_1View"/>
        <childnode refid="423" relation="usage">
          <edgelabel>blob</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="37" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="37" bodyend="-1"/>
    <listofallmembers>
      <member refid="structllama_1_1View_1a583df1438f7e33bd42b9f501f5705383" prot="public" virt="non-virtual"><scope>llama::View</scope><name>accessor</name></member>
      <member refid="structllama_1_1View_1a0435dd4f93746054745de12c42857790" prot="public" virt="non-virtual"><scope>llama::View</scope><name>accessor</name></member>
      <member refid="structllama_1_1View_1a165e82970b5d8e51aa4814f805ff3c28" prot="public" virt="non-virtual"><scope>llama::View</scope><name>blob</name></member>
      <member refid="structllama_1_1View_1a93aa3bf8757929f678b73e0e01e92ee9" prot="public" virt="non-virtual"><scope>llama::View</scope><name>BlobType</name></member>
      <member refid="structllama_1_1View_1a7426dad7ef36d24058223d98263f3b9a" prot="public" virt="non-virtual"><scope>llama::View</scope><name>mapping</name></member>
      <member refid="structllama_1_1View_1a674140b83f2489c3695e9fafb0bfc207" prot="public" virt="non-virtual"><scope>llama::View</scope><name>Mapping</name></member>
      <member refid="structllama_1_1View_1ac962556be2456999f924b3a7a020be38" prot="public" virt="non-virtual"><scope>llama::View</scope><name>operator()</name></member>
      <member refid="structllama_1_1View_1a71f883c4edd040ed979a0c7d820aeeeb" prot="public" virt="non-virtual"><scope>llama::View</scope><name>operator()</name></member>
      <member refid="structllama_1_1View_1a496b290b371265664a4af20b55c01320" prot="public" virt="non-virtual"><scope>llama::View</scope><name>operator()</name></member>
      <member refid="structllama_1_1View_1ad0294119f8d577dd2e1eeb7dcd608e6b" prot="public" virt="non-virtual"><scope>llama::View</scope><name>operator()</name></member>
      <member refid="structllama_1_1View_1a60065a34e0031eb9e257b9b53254d764" prot="public" virt="non-virtual"><scope>llama::View</scope><name>operator()</name></member>
      <member refid="structllama_1_1View_1ab230f4f9c30c26a60827b490ebd0479c" prot="public" virt="non-virtual"><scope>llama::View</scope><name>View</name></member>
      <member refid="structllama_1_1View_1a8d3fda64c6b75514e8c1ba335869e3ae" prot="public" virt="non-virtual"><scope>llama::View</scope><name>View</name></member>
      <member refid="structllama_1_1View_1afd9c19de4a6d957c1248533cba0bde01" prot="public" virt="non-virtual"><scope>llama::View</scope><name>View</name></member>
      <member refid="structllama_1_1View_1adc8280be97d67fe2358b78ce0c5a120c" prot="public" virt="non-virtual"><scope>llama::View</scope><name>View</name></member>
      <member refid="structllama_1_1View_1a0fe0208a4618b9b41881f18e0d1c32f7" prot="public" virt="non-virtual"><scope>llama::View</scope><name>VirtualDatumType</name></member>
      <member refid="structllama_1_1View_1abd530075c6464525fce1d79a7ccd7cfc" prot="public" virt="non-virtual"><scope>llama::View</scope><name>~View</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
