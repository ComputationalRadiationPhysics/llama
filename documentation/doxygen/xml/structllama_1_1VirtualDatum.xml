<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structllama_1_1VirtualDatum" kind="struct" language="C++" prot="public">
    <compoundname>llama::VirtualDatum</compoundname>
    <includes refid="View_8hpp" local="no">View.hpp</includes>
    <innerclass refid="structllama_1_1VirtualDatum_1_1AccessImpl" prot="public">llama::VirtualDatum::AccessImpl</innerclass>
    <innerclass refid="structllama_1_1VirtualDatum_1_1AccessImpl_3_01T__DatumCoord_00_01typename_01std_1_1enable__if_3_ef93ef5c5342a6f9a4c91df4fe73e8af" prot="public">llama::VirtualDatum::AccessImpl&lt; T_DatumCoord, typename std::enable_if&lt; !is_DatumStruct&lt; GetTypeFromDatumCoord&lt; typename Mapping::DatumDomain, typename BoundDatumDomain::template Cat&lt; T_DatumCoord &gt; &gt; &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structllama_1_1VirtualDatum_1_1AccessImpl_3_01T__DatumCoord_00_01typename_01std_1_1enable__if_3_cad2630bd48dbf313b8cd0753edeb19d" prot="public">llama::VirtualDatum::AccessImpl&lt; T_DatumCoord, typename std::enable_if&lt; is_DatumStruct&lt; GetTypeFromDatumCoord&lt; typename Mapping::DatumDomain, typename BoundDatumDomain::template Cat&lt; T_DatumCoord &gt; &gt; &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structllama_1_1VirtualDatum_1_1AccessWithBoundDatumDomainImpl" prot="public">llama::VirtualDatum::AccessWithBoundDatumDomainImpl</innerclass>
    <innerclass refid="structllama_1_1VirtualDatum_1_1AccessWithBoundDatumDomainImpl_3_01DatumCoord_3_01T__coord_8_8_8_01_4_01_4" prot="public">llama::VirtualDatum::AccessWithBoundDatumDomainImpl&lt; DatumCoord&lt; T_coord... &gt; &gt;</innerclass>
    <innerclass refid="structllama_1_1VirtualDatum_1_1AccessWithTypeImpl" prot="public">llama::VirtualDatum::AccessWithTypeImpl</innerclass>
    <innerclass refid="structllama_1_1VirtualDatum_1_1AccessWithTypeImpl_3_01DatumCoord_3_01T__coord_8_8_8_01_4_01_4" prot="public">llama::VirtualDatum::AccessWithTypeImpl&lt; DatumCoord&lt; T_coord... &gt; &gt;</innerclass>
    <templateparamlist>
      <param>
        <type>typename T_View</type>
      </param>
      <param>
        <type>typename T_BoundDatumDomain</type>
        <defval><ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref>&lt;&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structllama_1_1VirtualDatum_1a4d395cc48cd8bad75611f719ad06b5b1" prot="public" static="no">
        <type>T_View</type>
        <definition>using llama::VirtualDatum::ViewType =  T_View</definition>
        <argsstring></argsstring>
        <name>ViewType</name>
        <briefdescription>
<para>parent view of the virtual datum </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="676" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1VirtualDatum_1ac0f3c397f83d12489fabc8dfccee7d7e" prot="public" static="no">
        <type>typename ViewType::Mapping</type>
        <definition>using llama::VirtualDatum::Mapping =  typename ViewType::Mapping</definition>
        <argsstring></argsstring>
        <name>Mapping</name>
        <briefdescription>
<para>mapping of the underlying view </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="678" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1VirtualDatum_1a4f4dec4f12bfa3a9013652b9f0c023d7" prot="public" static="no">
        <type>typename ViewType::BlobType</type>
        <definition>using llama::VirtualDatum::BlobType =  typename ViewType::BlobType</definition>
        <argsstring></argsstring>
        <name>BlobType</name>
        <briefdescription>
<para>blobtype of the underlying view </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="680" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1VirtualDatum_1a34a083a142b2916dc7b8753740b03a91" prot="public" static="no">
        <type>T_BoundDatumDomain</type>
        <definition>using llama::VirtualDatum::BoundDatumDomain =  T_BoundDatumDomain</definition>
        <argsstring></argsstring>
        <name>BoundDatumDomain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>already resolved part of the datum domain, basically the new datum domain tree root </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="684" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="684" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1VirtualDatum_1a3481a2351965008f4e9ab9d5b8fac198" prot="public" static="no">
        <type><ref refid="namespacellama_1a22362d58c566945f0f8178e2af1b0013" kindref="member">GetTypeFromDatumCoord</ref>&lt; typename Mapping::DatumDomain, <ref refid="structllama_1_1VirtualDatum_1a34a083a142b2916dc7b8753740b03a91" kindref="member">BoundDatumDomain</ref> &gt;</type>
        <definition>using llama::VirtualDatum::AccessibleDatumDomain =  GetTypeFromDatumCoord&lt; typename Mapping::DatumDomain, BoundDatumDomain &gt;</definition>
        <argsstring></argsstring>
        <name>AccessibleDatumDomain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sub part of the datum domain of the view/mapping relative to <ref refid="structllama_1_1VirtualDatum_1a34a083a142b2916dc7b8753740b03a91" kindref="member">BoundDatumDomain</ref>. If BoundDatumDomain is <computeroutput><ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref>&lt;&gt;</computeroutput> (default) AccessibleDatumDomain is the same as <computeroutput>Mapping::DatumDomain</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="691" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="694" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structllama_1_1VirtualDatum_1ad334d107bd84aed63b3a64d0857013c4" prot="public" static="no" mutable="no">
        <type>Mapping::UserDomain const</type>
        <definition>Mapping::UserDomain const llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::userDomainPos</definition>
        <argsstring></argsstring>
        <name>userDomainPos</name>
        <briefdescription>
<para>resolved position in the user domain </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="686" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structllama_1_1VirtualDatum_1a349037e81060afc972ca86768ae5567e" prot="public" static="no" mutable="no">
        <type><ref refid="structllama_1_1VirtualDatum_1a4d395cc48cd8bad75611f719ad06b5b1" kindref="member">ViewType</ref> &amp;</type>
        <definition>ViewType&amp; llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::view</definition>
        <argsstring></argsstring>
        <name>view</name>
        <briefdescription>
<para>reference to parent view </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="696" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="696" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a0a513180bf4d05b003101ff8b6991eba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_DatumCoordOrUIDs</declname>
            <defname>T_DatumCoordOrUIDs</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::access</definition>
        <argsstring>(T_DatumCoordOrUIDs &amp;&amp;...) -&gt; decltype(AccessWithTypeImpl&lt; T_DatumCoordOrUIDs... &gt;::apply(std::forward&lt; T_View &gt;(view), userDomainPos))</argsstring>
        <name>access</name>
        <param>
          <type>T_DatumCoordOrUIDs &amp;&amp;</type>
          <declname>...</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="873" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="873" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a043286b5750bde50f73efbbb0983cdfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_DatumCoordOrUIDs</declname>
            <defname>T_DatumCoordOrUIDs</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::access</definition>
        <argsstring>() -&gt; decltype(AccessWithTypeImpl&lt; T_DatumCoordOrUIDs... &gt;::apply(std::forward&lt; T_View &gt;(view), userDomainPos))</argsstring>
        <name>access</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Explicit access function for a coordinate in the datum domain given as unique identifier or <ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref>. If the address <ndash/> independently whether given as datum coord or UID <ndash/> is not a leaf but, a new virtual datum with a bound datum coord is returned. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_DatumCoordOrUIDs...</parametername>
</parameternamelist>
<parameterdescription>
<para>variadic number of types as unique identifier <bold>or</bold> <ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref> with tree coordinates as template parameters inside </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to element at resolved user domain and given datum domain coordinate or a new virtual datum with a bound datum coord </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="899" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="899" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1aed4a4b05ca4f73202aea9570cd9d939a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>T_coord</declname>
            <defname>T_coord</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::access</definition>
        <argsstring>() -&gt; decltype(AccessImpl&lt; DatumCoord&lt; T_coord... &gt; &gt;::apply(std::forward&lt; T_View &gt;(view), userDomainPos))</argsstring>
        <name>access</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Explicit access function for a coordinate in the datum domain given as tree position indexes. If the address <ndash/> independently whether given as datum coord or UID <ndash/> is not a leaf but, a new virtual datum with a bound datum coord is returned. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_coord...</parametername>
</parameternamelist>
<parameterdescription>
<para>variadic number std::size_t numbers as tree coordinates </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to element at resolved user domain and given datum domain coordinate or a new virtual datum with a bound datum coord </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="924" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="924" bodyend="935"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a3012e4b4b5c73c8e49d2e7d886b082b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_DatumCoordOrUIDs</declname>
            <defname>T_DatumCoordOrUIDs</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator()</definition>
        <argsstring>(T_DatumCoordOrUIDs &amp;&amp;... datumCoordOrUIDs) -&gt; decltype(access&lt; T_DatumCoordOrUIDs... &gt;())</argsstring>
        <name>operator()</name>
        <param>
          <type>T_DatumCoordOrUIDs &amp;&amp;...</type>
          <declname>datumCoordOrUIDs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>operator overload() for a coordinate in the datum domain given as unique identifier or <ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref>. If the address <ndash/> independently whether given as datum coord or UID <ndash/> is not a leaf but, a new virtual datum with a bound datum coord is returned. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datumCoordOrUIDs</parametername>
</parameternamelist>
<parameterdescription>
<para>instantiation of variadic number of unique identifier types <bold>or</bold> <ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref> with tree coordinates as template parameters inside </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to element at resolved user domain and given datum domain coordinate or a new virtual datum with a bound datum coord </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="950" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="950" bodyend="963"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a180124d0b03f09d4a14fd9385f45ded1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="965" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="965" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a09c69fc62535836c1ff0ebbae2565f32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="965" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="965" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1aac2be458e17e34dce5a8c4bd6d7ec7ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="965" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="965" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1ad8894e0dff20095dfe722d85d13e0e2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="965" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="965" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a034d86ad3c11b8996221ac4b1358981f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator=</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator=</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="965" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="965" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a0c779e530d68a19c3cd5e188cf083762" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator=</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator=</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="965" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="965" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a19f2eeae8443799789e4e8f4b8fbe344" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator+=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="966" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="966" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a1489f93f9d9f1feaef5bd053368a93e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator+=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="966" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="966" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a7d234c31c735460a0deb25132470d5fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator+=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="966" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="966" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a1d52db278f421a70921de86fc1d88b71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator+=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="966" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="966" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a27a825a2940cc351da12e148e987aec1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator+=</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator+=</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="966" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="966" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a382be7758669b225d3b83dc211f51714" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator+=</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator+=</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="966" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="966" bodyend="966"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a9d401a92c5e90020b48872e51695cb36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator-=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="967" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="967" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1abe60c682cdb4f1b9b0a3e2dcefd74ee3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator-=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="967" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="967" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1af8fa6927d9b118dcc24cebc07038a3a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator-=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="967" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="967" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1aa5a781900e27d663d75c8b6c67fa858c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator-=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator-=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="967" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="967" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1aaee48de5d0f8549330a4bcdba50da26a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator-=</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator-=</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="967" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="967" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a16b69e430eba587c3b5ad1672fd179c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator-=</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator-=</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="967" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="967" bodyend="967"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1adcad7ea91be64b72d826e73fad59f844" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator*=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="968" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="968" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a15614e5903fe20473f4aa49c4af4e100" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator*=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="968" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="968" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a80bfceb5b7800b3e5e240a105c56b191" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator*=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="968" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="968" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1aded12152110a3b1389376780f652fab8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator*=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator*=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="968" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="968" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1ac5ae476ae32c16cdfb8ab8ddff1c86fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator*=</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator*=</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="968" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="968" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1ac34e4420e539c19ef6bee0f97b68b283" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator*=</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator*=</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="968" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="968" bodyend="968"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a5bf94b57f277d77ed15075ff35784c3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator/=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="969" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="969" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1aaf927b644dbe58a4313f39c658450ad0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator/=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="969" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="969" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a2e0f7a4021956538b3762e0b9a89d4cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator/=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="969" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="969" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a50cd887c54905026d0f6743d767e3cfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator/=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator/=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="969" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="969" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a2932c8d338efc31d7d471d42eaea0ddf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator/=</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator/=</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="969" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="969" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a296ebd124be87e7c681ba4c9a4c57229" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator/=</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator/=</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="969" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="969" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1aa60d94438f78ea1c6bfd70d1a3fac778" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator%=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator%=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="970" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="970" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1ae9d797b7608d914b50058aa36f7b00de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator%=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator%=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="970" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="970" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a25e13372ceef482c30d630f947f4ea8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator%=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator%=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="970" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="970" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1aeb98a584b83dc5768bf818f6498b3711" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator%=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator%=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="970" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="970" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a59560ca08f3c93cef5cd1c367981051a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator%=</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator%=</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="970" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="970" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1ae12fec4852f0f8a0bb933c631358a502" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator%=</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; decltype(*this)&amp;</argsstring>
        <name>operator%=</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="970" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="970" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a377da39a374b5a5a6d5ba1135d288141" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator==</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="972" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="972" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1abd0b23c4529625aaa11376bd6be3ace2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator==</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="972" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="972" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a9065461745697fc43c75eaed8c6fee26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator==</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="972" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="972" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a1a6a7a395439c4c36f30bd9d7d501aef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator==</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="972" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="972" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a87955b3703420c5b97413a764b833471" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator==</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="972" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="972" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a15c956aeeafc148a817451bf29d643f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator==</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="972" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="972" bodyend="972"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a383a1fb207d04eb3f59c18a67f1e28e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator!=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="973" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="973" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a847faccf7a64be41b556966bc6bb46a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator!=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="973" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="973" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a9eb037776b5fd473ddafecacbad4f2ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator!=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="973" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="973" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a838d232b5d540bad33c8966d3d4c95ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator!=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="973" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="973" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a29446d24f4955bcd3b3ef860eaeb02d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator!=</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; bool</argsstring>
        <name>operator!=</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="973" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="973" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1af9fcc6712293ce008ce2ac89726b3744" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator!=</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator!=</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="973" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="973" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1ad94522d2750518abf1bfc0b3f4dcc819" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="974" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="974" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1af0264a483f3d8560fd56c517baa6e806" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="974" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="974" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a1be4f3888ac8be88e20c01f9e0f57c7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="974" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="974" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1ac993498a971d99a734757dc60ad2b212" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="974" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="974" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a75b883c27689d93fe2d19bf282bbffb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; bool</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="974" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="974" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1aa903952caf95fbdbe2fda20001cb229a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="974" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="974" bodyend="974"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a76fb9a61ed3a28f055d134caa85f4010" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="975" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="975" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1aea4b341eff066ba87b746c5c4f6f0eaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="975" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="975" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a241c14ca0f3d7fdb25de18e4e559cdb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="975" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="975" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a309a83554e34bca1aea2b7410f9c6406" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="975" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="975" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a4b9061dd4b86591aa219639e9eebaa53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;=</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; bool</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="975" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="975" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a83a6e8d9ba0f4fb9b28b285d4b90ebd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&lt;=</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="975" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="975" bodyend="975"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a524164c97e290d1b79b061503716a7d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="976" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="976" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a847ac11503e8d1347021fe0bd2e50fbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="976" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="976" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1ad83d9c53026304b8c3cfdfa93dac871e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="976" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="976" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a8f5848b30c54c6564c2ca57b4757064b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="976" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="976" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a52acceb3b515562921da452d28db49c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; bool</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="976" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="976" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1af6d7d6d9f829974b3b53db3aeb61694b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="976" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="976" bodyend="976"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a58021062638c6ac6b98617332d53e3e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="977" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="977" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1ae03b5137e582c7c1093fc13f3e2e6ac4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherView</type>
          </param>
          <param>
            <type>typename T_OtherBoundDatumDomain</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;=</definition>
        <argsstring>(VirtualDatum&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>&lt; T_OtherView, T_OtherBoundDatumDomain &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="977" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="977" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1ab97de17c4cfb35415b5792c2dcb791db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;other) -&gt; bool</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="977" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="977" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a0cea09f486c9ad05ba060d3f86fd1d68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherMapping</type>
          </param>
          <param>
            <type>typename T_OtherBlobType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;=</definition>
        <argsstring>(View&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structllama_1_1View" kindref="compound">View</ref>&lt; T_OtherMapping, T_OtherBlobType &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="977" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="977" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a40f798b0076e60a67fc82f3fb3616dc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;=</definition>
        <argsstring>(T_OtherType &amp;other) -&gt; bool</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>T_OtherType &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="977" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="977" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualDatum_1a55bc50ccdf1250a8deac937751d68dfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T_OtherType</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualDatum&lt; T_View, T_BoundDatumDomain &gt;::operator&gt;=</definition>
        <argsstring>(T_OtherType &amp;&amp;other) -&gt; bool</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>T_OtherType &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="977" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="977" bodyend="977"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Virtual data type returned by <ref refid="structllama_1_1View" kindref="compound">View</ref> after resolving user domain address, being &quot;virtual&quot; in that sense that the data of the virtual datum are not part of the struct itself but a helper object to address them in the compile time datum domain. Beside the user domain, also a part of the compile time domain may be resolved for access like <computeroutput>datum( Pos ) += datum( Vel )</computeroutput>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_View</parametername>
</parameternamelist>
<parameterdescription>
<para>parent view of the virtual datum </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_BoundDatumDomain</parametername>
</parameternamelist>
<parameterdescription>
<para>optional <ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref> which restricts the virtual datum to a smaller part of the datum domain </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="/home/alexander/develop/work/llama/include/llama/View.hpp" line="674" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/View.hpp" bodystart="673" bodyend="978"/>
    <listofallmembers>
      <member refid="structllama_1_1VirtualDatum_1a0a513180bf4d05b003101ff8b6991eba" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>access</name></member>
      <member refid="structllama_1_1VirtualDatum_1a043286b5750bde50f73efbbb0983cdfb" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>access</name></member>
      <member refid="structllama_1_1VirtualDatum_1aed4a4b05ca4f73202aea9570cd9d939a" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>access</name></member>
      <member refid="structllama_1_1VirtualDatum_1a3481a2351965008f4e9ab9d5b8fac198" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>AccessibleDatumDomain</name></member>
      <member refid="structllama_1_1VirtualDatum_1a4f4dec4f12bfa3a9013652b9f0c023d7" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>BlobType</name></member>
      <member refid="structllama_1_1VirtualDatum_1a34a083a142b2916dc7b8753740b03a91" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>BoundDatumDomain</name></member>
      <member refid="structllama_1_1VirtualDatum_1ac0f3c397f83d12489fabc8dfccee7d7e" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>Mapping</name></member>
      <member refid="structllama_1_1VirtualDatum_1a383a1fb207d04eb3f59c18a67f1e28e6" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator!=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a847faccf7a64be41b556966bc6bb46a8" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator!=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a9eb037776b5fd473ddafecacbad4f2ba" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator!=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a838d232b5d540bad33c8966d3d4c95ba" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator!=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a29446d24f4955bcd3b3ef860eaeb02d0" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator!=</name></member>
      <member refid="structllama_1_1VirtualDatum_1af9fcc6712293ce008ce2ac89726b3744" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator!=</name></member>
      <member refid="structllama_1_1VirtualDatum_1aa60d94438f78ea1c6bfd70d1a3fac778" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator%=</name></member>
      <member refid="structllama_1_1VirtualDatum_1ae9d797b7608d914b50058aa36f7b00de" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator%=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a25e13372ceef482c30d630f947f4ea8f" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator%=</name></member>
      <member refid="structllama_1_1VirtualDatum_1aeb98a584b83dc5768bf818f6498b3711" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator%=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a59560ca08f3c93cef5cd1c367981051a" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator%=</name></member>
      <member refid="structllama_1_1VirtualDatum_1ae12fec4852f0f8a0bb933c631358a502" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator%=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a3012e4b4b5c73c8e49d2e7d886b082b6" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator()</name></member>
      <member refid="structllama_1_1VirtualDatum_1adcad7ea91be64b72d826e73fad59f844" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator*=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a15614e5903fe20473f4aa49c4af4e100" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator*=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a80bfceb5b7800b3e5e240a105c56b191" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator*=</name></member>
      <member refid="structllama_1_1VirtualDatum_1aded12152110a3b1389376780f652fab8" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator*=</name></member>
      <member refid="structllama_1_1VirtualDatum_1ac5ae476ae32c16cdfb8ab8ddff1c86fc" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator*=</name></member>
      <member refid="structllama_1_1VirtualDatum_1ac34e4420e539c19ef6bee0f97b68b283" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator*=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a19f2eeae8443799789e4e8f4b8fbe344" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator+=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a1489f93f9d9f1feaef5bd053368a93e3" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator+=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a7d234c31c735460a0deb25132470d5fb" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator+=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a1d52db278f421a70921de86fc1d88b71" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator+=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a27a825a2940cc351da12e148e987aec1" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator+=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a382be7758669b225d3b83dc211f51714" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator+=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a9d401a92c5e90020b48872e51695cb36" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator-=</name></member>
      <member refid="structllama_1_1VirtualDatum_1abe60c682cdb4f1b9b0a3e2dcefd74ee3" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator-=</name></member>
      <member refid="structllama_1_1VirtualDatum_1af8fa6927d9b118dcc24cebc07038a3a8" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator-=</name></member>
      <member refid="structllama_1_1VirtualDatum_1aa5a781900e27d663d75c8b6c67fa858c" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator-=</name></member>
      <member refid="structllama_1_1VirtualDatum_1aaee48de5d0f8549330a4bcdba50da26a" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator-=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a16b69e430eba587c3b5ad1672fd179c9" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator-=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a5bf94b57f277d77ed15075ff35784c3a" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator/=</name></member>
      <member refid="structllama_1_1VirtualDatum_1aaf927b644dbe58a4313f39c658450ad0" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator/=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a2e0f7a4021956538b3762e0b9a89d4cb" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator/=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a50cd887c54905026d0f6743d767e3cfb" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator/=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a2932c8d338efc31d7d471d42eaea0ddf" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator/=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a296ebd124be87e7c681ba4c9a4c57229" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator/=</name></member>
      <member refid="structllama_1_1VirtualDatum_1ad94522d2750518abf1bfc0b3f4dcc819" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1af0264a483f3d8560fd56c517baa6e806" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1a1be4f3888ac8be88e20c01f9e0f57c7a" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1ac993498a971d99a734757dc60ad2b212" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1a75b883c27689d93fe2d19bf282bbffb9" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1aa903952caf95fbdbe2fda20001cb229a" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1a76fb9a61ed3a28f055d134caa85f4010" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1aea4b341eff066ba87b746c5c4f6f0eaf" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a241c14ca0f3d7fdb25de18e4e559cdb7" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a309a83554e34bca1aea2b7410f9c6406" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a4b9061dd4b86591aa219639e9eebaa53" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a83a6e8d9ba0f4fb9b28b285d4b90ebd1" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&lt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a180124d0b03f09d4a14fd9385f45ded1" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a09c69fc62535836c1ff0ebbae2565f32" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator=</name></member>
      <member refid="structllama_1_1VirtualDatum_1aac2be458e17e34dce5a8c4bd6d7ec7ec" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator=</name></member>
      <member refid="structllama_1_1VirtualDatum_1ad8894e0dff20095dfe722d85d13e0e2f" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a034d86ad3c11b8996221ac4b1358981f" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a0c779e530d68a19c3cd5e188cf083762" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a377da39a374b5a5a6d5ba1135d288141" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator==</name></member>
      <member refid="structllama_1_1VirtualDatum_1abd0b23c4529625aaa11376bd6be3ace2" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator==</name></member>
      <member refid="structllama_1_1VirtualDatum_1a9065461745697fc43c75eaed8c6fee26" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator==</name></member>
      <member refid="structllama_1_1VirtualDatum_1a1a6a7a395439c4c36f30bd9d7d501aef" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator==</name></member>
      <member refid="structllama_1_1VirtualDatum_1a87955b3703420c5b97413a764b833471" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator==</name></member>
      <member refid="structllama_1_1VirtualDatum_1a15c956aeeafc148a817451bf29d643f2" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator==</name></member>
      <member refid="structllama_1_1VirtualDatum_1a524164c97e290d1b79b061503716a7d6" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1a847ac11503e8d1347021fe0bd2e50fbe" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1ad83d9c53026304b8c3cfdfa93dac871e" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1a8f5848b30c54c6564c2ca57b4757064b" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1a52acceb3b515562921da452d28db49c9" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1af6d7d6d9f829974b3b53db3aeb61694b" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;</name></member>
      <member refid="structllama_1_1VirtualDatum_1a58021062638c6ac6b98617332d53e3e7" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1ae03b5137e582c7c1093fc13f3e2e6ac4" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1ab97de17c4cfb35415b5792c2dcb791db" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a0cea09f486c9ad05ba060d3f86fd1d68" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a40f798b0076e60a67fc82f3fb3616dc3" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1a55bc50ccdf1250a8deac937751d68dfa" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>operator&gt;=</name></member>
      <member refid="structllama_1_1VirtualDatum_1ad334d107bd84aed63b3a64d0857013c4" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>userDomainPos</name></member>
      <member refid="structllama_1_1VirtualDatum_1a349037e81060afc972ca86768ae5567e" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>view</name></member>
      <member refid="structllama_1_1VirtualDatum_1a4d395cc48cd8bad75611f719ad06b5b1" prot="public" virt="non-virtual"><scope>llama::VirtualDatum</scope><name>ViewType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
