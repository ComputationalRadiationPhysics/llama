<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structllama_1_1VirtualView" kind="struct" language="C++" prot="public">
    <compoundname>llama::VirtualView</compoundname>
    <includes refid="VirtualView_8hpp" local="no">VirtualView.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T_ParentViewType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structllama_1_1VirtualView_1a13b6273ccd2fa7b6c1b7b00950cf307f" prot="public" static="no">
        <type>T_ParentViewType</type>
        <definition>using llama::VirtualView::ParentView =  T_ParentViewType</definition>
        <argsstring></argsstring>
        <name>ParentView</name>
        <briefdescription>
<para>type of parent view </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="38" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1VirtualView_1af042c300cedcfe447fa84c9c2ce9e152" prot="public" static="no">
        <type>typename ParentView::BlobType</type>
        <definition>using llama::VirtualView::BlobType =  typename ParentView::BlobType</definition>
        <argsstring></argsstring>
        <name>BlobType</name>
        <briefdescription>
<para>blob type, gotten from parent view </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="40" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1VirtualView_1ab8b386434df0aed417e974b69a7379b3" prot="public" static="no">
        <type>typename ParentView::Mapping</type>
        <definition>using llama::VirtualView::Mapping =  typename ParentView::Mapping</definition>
        <argsstring></argsstring>
        <name>Mapping</name>
        <briefdescription>
<para>mapping type, gotten from parent view </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="42" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1VirtualView_1a95061d3ecfa6229c2606378cb1f78f33" prot="public" static="no">
        <type>typename ParentView::VirtualDatumType</type>
        <definition>using llama::VirtualView::VirtualDatumType =  typename ParentView::VirtualDatumType</definition>
        <argsstring></argsstring>
        <name>VirtualDatumType</name>
        <briefdescription>
<para><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref> type, gotten from parent view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="44" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structllama_1_1VirtualView_1abca62490ac2e860c543ef5c1d11c878b" prot="public" static="no" mutable="no">
        <type><ref refid="structllama_1_1VirtualView_1a13b6273ccd2fa7b6c1b7b00950cf307f" kindref="member">ParentView</ref> &amp;</type>
        <definition>ParentView&amp; llama::VirtualView&lt; T_ParentViewType &gt;::parentView</definition>
        <argsstring></argsstring>
        <name>parentView</name>
        <briefdescription>
<para>reference to parental view </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="200" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structllama_1_1VirtualView_1ad1ed8471a00d7a016595b52cf0fd541b" prot="public" static="no" mutable="no">
        <type>const Mapping::UserDomain</type>
        <definition>const Mapping::UserDomain llama::VirtualView&lt; T_ParentViewType &gt;::position</definition>
        <argsstring></argsstring>
        <name>position</name>
        <briefdescription>
<para>shited position in parental view </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="202" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structllama_1_1VirtualView_1ae4912fed3878afd8cb12b89510c9e5a8" prot="public" static="no" mutable="no">
        <type>const Mapping::UserDomain</type>
        <definition>const Mapping::UserDomain llama::VirtualView&lt; T_ParentViewType &gt;::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
<para>shown size </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="204" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structllama_1_1VirtualView_1aec09601508ebb03072c98dc6beab8b5c" prot="public" static="no" mutable="no">
        <type><ref refid="structllama_1_1Array" kindref="compound">Array</ref>&lt; <ref refid="structllama_1_1VirtualView_1af042c300cedcfe447fa84c9c2ce9e152" kindref="member">BlobType</ref>, Mapping::blobCount &gt; &amp;</type>
        <definition>Array&lt; BlobType, Mapping::blobCount &gt;&amp; llama::VirtualView&lt; T_ParentViewType &gt;::blob</definition>
        <argsstring></argsstring>
        <name>blob</name>
        <briefdescription>
<para>reference to blob object of parent </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="209" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structllama_1_1VirtualView_1af96b21c522623cc94c88188960bbfddd" prot="public" static="no" mutable="no">
        <type>const <ref refid="structllama_1_1VirtualView_1ab8b386434df0aed417e974b69a7379b3" kindref="member">Mapping</ref> &amp;</type>
        <definition>const Mapping&amp; llama::VirtualView&lt; T_ParentViewType &gt;::mapping</definition>
        <argsstring></argsstring>
        <name>mapping</name>
        <briefdescription>
<para>reference to mapping of parent </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="211" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structllama_1_1VirtualView_1a6497f87b0ae075b3336490075305363e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::VirtualView&lt; T_ParentViewType &gt;::VirtualView</definition>
        <argsstring>()=delete</argsstring>
        <name>VirtualView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualView_1abc0a9afd6144f2dd210cd54e86b652f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::VirtualView&lt; T_ParentViewType &gt;::VirtualView</definition>
        <argsstring>(VirtualView const &amp;)=default</argsstring>
        <name>VirtualView</name>
        <param>
          <type><ref refid="structllama_1_1VirtualView" kindref="compound">VirtualView</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualView_1a6cd714439f67e826fe7d888c5c8dba7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::VirtualView&lt; T_ParentViewType &gt;::VirtualView</definition>
        <argsstring>(VirtualView &amp;&amp;)=default</argsstring>
        <name>VirtualView</name>
        <param>
          <type><ref refid="structllama_1_1VirtualView" kindref="compound">VirtualView</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualView_1abe5b8ab3619c15aec658c7eb7d48495e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>llama::VirtualView&lt; T_ParentViewType &gt;::~VirtualView</definition>
        <argsstring>()=default</argsstring>
        <name>~VirtualView</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualView_1a1ae5e3104bc8fb3507caa4ac7959dddd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>llama::VirtualView&lt; T_ParentViewType &gt;::VirtualView</definition>
        <argsstring>(ParentView &amp;parentView, typename Mapping::UserDomain const position, typename Mapping::UserDomain const size)</argsstring>
        <name>VirtualView</name>
        <param>
          <type><ref refid="structllama_1_1VirtualView_1a13b6273ccd2fa7b6c1b7b00950cf307f" kindref="member">ParentView</ref> &amp;</type>
          <declname>parentView</declname>
        </param>
        <param>
          <type>typename Mapping::UserDomain const</type>
          <declname>position</declname>
        </param>
        <param>
          <type>typename Mapping::UserDomain const</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlike a <ref refid="structllama_1_1View" kindref="compound">View</ref>, a <ref refid="structllama_1_1VirtualView" kindref="compound">VirtualView</ref> can be created without a factory directly from a parent view. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>parentView</parametername>
</parameternamelist>
<parameterdescription>
<para>a reference to the parental view. Meaning, the parental view should not get out of scope before the virtual view. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>shifted position relative to the parental view </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the virtual view </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="60" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="60" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualView_1a6e55057662aafced4893806725153ce6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>T_coords</declname>
            <defname>T_coords</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualView&lt; T_ParentViewType &gt;::accessor</definition>
        <argsstring>(typename Mapping::UserDomain const userDomain) -&gt; GetType&lt; typename Mapping::DatumDomain, T_coords... &gt; &amp;</argsstring>
        <name>accessor</name>
        <param>
          <type>typename Mapping::UserDomain const</type>
          <declname>userDomain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Explicit access function taking the datum domain as tree index coordinate template arguments and the user domain as runtime parameter. The operator() overloadings should be preferred as they show a more array of struct like interface using <ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_coords...</parametername>
</parameternamelist>
<parameterdescription>
<para>tree index coordinate </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>userDomain</parametername>
</parameternamelist>
<parameterdescription>
<para>user domain as <ref refid="namespacellama_1a03077c6597f96a84efe064fa64d81827" kindref="member">UserDomain</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="84" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="84" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualView_1ad4d669766c9d48669c1a52df1c21b70f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_UIDs</declname>
            <defname>T_UIDs</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualView&lt; T_ParentViewType &gt;::accessor</definition>
        <argsstring>(typename Mapping::UserDomain const userDomain) -&gt; GetTypeFromDatumCoord&lt; typename Mapping::DatumDomain, GetCoordFromUID&lt; typename Mapping::DatumDomain, T_UIDs... &gt; &gt; &amp;</argsstring>
        <name>accessor</name>
        <param>
          <type>typename Mapping::UserDomain const</type>
          <declname>userDomain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Explicit access function taking the datum domain as UID type list template arguments and the user domain as runtime parameter. The operator() overloadings should be preferred as they show a more array of struct like interface using <ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_UIDs...</parametername>
</parameternamelist>
<parameterdescription>
<para>UID type list </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>userDomain</parametername>
</parameternamelist>
<parameterdescription>
<para>user domain as <ref refid="namespacellama_1a03077c6597f96a84efe064fa64d81827" kindref="member">UserDomain</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="107" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="107" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualView_1a1e3ffbcde46a60e1b2f1862406e2d79c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::VirtualView&lt; T_ParentViewType &gt;::operator()</definition>
        <argsstring>(typename Mapping::UserDomain const userDomain) -&gt; VirtualDatumType</argsstring>
        <name>operator()</name>
        <param>
          <type>typename Mapping::UserDomain const</type>
          <declname>userDomain</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Operator overloading to reverse the order of compile time (datum domain) and run time (user domain) parameter with a helper object (<ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>). Should be favoured to access data because of the more array of struct like interface and the handy intermediate <ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref> object. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>userDomain</parametername>
</parameternamelist>
<parameterdescription>
<para>user domain as <ref refid="namespacellama_1a03077c6597f96a84efe064fa64d81827" kindref="member">UserDomain</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref> with bound user domain, which can be used to access the datum domain </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="132" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualView_1abffd8f3af035e92fbeffdeef4dc9092c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_Coord</declname>
            <defname>T_Coord</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualView&lt; T_ParentViewType &gt;::operator()</definition>
        <argsstring>(T_Coord... coord) -&gt; VirtualDatumType</argsstring>
        <name>operator()</name>
        <param>
          <type>T_Coord...</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Operator overloading to reverse the order of compile time (datum domain) and run time (user domain) parameter with a helper object (<ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref>). Should be favoured to access data because of the more array of struct like interface and the handy intermediate <ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref> object. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_Coord...</parametername>
</parameternamelist>
<parameterdescription>
<para>types of user domain coordinates </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>coord</parametername>
</parameternamelist>
<parameterdescription>
<para>user domain as list of numbers </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structllama_1_1VirtualDatum" kindref="compound">VirtualDatum</ref> with bound user domain, which can be used to access the datum domain </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="152" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="152" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualView_1a7142cebedeeeabed15fea51f07a0b5f0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>T_Coord</declname>
            <defname>T_Coord</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualView&lt; T_ParentViewType &gt;::operator()</definition>
        <argsstring>(T_Coord... coord) const -&gt; const VirtualDatumType</argsstring>
        <name>operator()</name>
        <param>
          <type>T_Coord...</type>
          <declname>coord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="164" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="164" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualView_1ad456a7841ca2a98ac003056d206d98d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::VirtualView&lt; T_ParentViewType &gt;::operator()</definition>
        <argsstring>(std::size_t coord=0) -&gt; VirtualDatumType</argsstring>
        <name>operator()</name>
        <param>
          <type>std::size_t</type>
          <declname>coord</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="175" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="175" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1VirtualView_1a3e89a9eb6efa918be4634a365c917628" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t...</type>
            <declname>T_coord</declname>
            <defname>T_coord</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto llama::VirtualView&lt; T_ParentViewType &gt;::operator()</definition>
        <argsstring>(DatumCoord&lt; T_coord... &gt; &amp;&amp;dc=DatumCoord&lt; T_coord... &gt;()) -&gt; GetType&lt; typename Mapping::DatumDomain, T_coord... &gt; &amp;</argsstring>
        <name>operator()</name>
        <param>
          <type><ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref>&lt; T_coord... &gt; &amp;&amp;</type>
          <declname>dc</declname>
          <defval><ref refid="structllama_1_1DatumCoord" kindref="compound">DatumCoord</ref>&lt; T_coord... &gt;()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="187" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="187" bodyend="197"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Struct which acts like a <ref refid="structllama_1_1View" kindref="compound">View</ref>, but shows only a smaller and/or shifted part of a parental (virtual) view. A virtual view does not hold any memory itself but has a reference to the parent view (and its memory). <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T_ParentViewType</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the parent, can also be another <ref refid="structllama_1_1VirtualView" kindref="compound">VirtualView</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="390">
        <label>llama::Array&lt; BlobType, Mapping::blobCount &gt;</label>
        <link refid="structllama_1_1Array"/>
      </node>
      <node id="389">
        <label>llama::VirtualView&lt; T_ParentViewType &gt;</label>
        <link refid="structllama_1_1VirtualView"/>
        <childnode refid="390" relation="usage">
          <edgelabel>blob</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" line="36" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/VirtualView.hpp" bodystart="35" bodyend="212"/>
    <listofallmembers>
      <member refid="structllama_1_1VirtualView_1a6e55057662aafced4893806725153ce6" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>accessor</name></member>
      <member refid="structllama_1_1VirtualView_1ad4d669766c9d48669c1a52df1c21b70f" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>accessor</name></member>
      <member refid="structllama_1_1VirtualView_1aec09601508ebb03072c98dc6beab8b5c" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>blob</name></member>
      <member refid="structllama_1_1VirtualView_1af042c300cedcfe447fa84c9c2ce9e152" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>BlobType</name></member>
      <member refid="structllama_1_1VirtualView_1af96b21c522623cc94c88188960bbfddd" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>mapping</name></member>
      <member refid="structllama_1_1VirtualView_1ab8b386434df0aed417e974b69a7379b3" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>Mapping</name></member>
      <member refid="structllama_1_1VirtualView_1a1e3ffbcde46a60e1b2f1862406e2d79c" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>operator()</name></member>
      <member refid="structllama_1_1VirtualView_1abffd8f3af035e92fbeffdeef4dc9092c" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>operator()</name></member>
      <member refid="structllama_1_1VirtualView_1a7142cebedeeeabed15fea51f07a0b5f0" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>operator()</name></member>
      <member refid="structllama_1_1VirtualView_1ad456a7841ca2a98ac003056d206d98d0" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>operator()</name></member>
      <member refid="structllama_1_1VirtualView_1a3e89a9eb6efa918be4634a365c917628" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>operator()</name></member>
      <member refid="structllama_1_1VirtualView_1a13b6273ccd2fa7b6c1b7b00950cf307f" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>ParentView</name></member>
      <member refid="structllama_1_1VirtualView_1abca62490ac2e860c543ef5c1d11c878b" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>parentView</name></member>
      <member refid="structllama_1_1VirtualView_1ad1ed8471a00d7a016595b52cf0fd541b" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>position</name></member>
      <member refid="structllama_1_1VirtualView_1ae4912fed3878afd8cb12b89510c9e5a8" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>size</name></member>
      <member refid="structllama_1_1VirtualView_1a95061d3ecfa6229c2606378cb1f78f33" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>VirtualDatumType</name></member>
      <member refid="structllama_1_1VirtualView_1a6497f87b0ae075b3336490075305363e" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>VirtualView</name></member>
      <member refid="structllama_1_1VirtualView_1abc0a9afd6144f2dd210cd54e86b652f6" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>VirtualView</name></member>
      <member refid="structllama_1_1VirtualView_1a6cd714439f67e826fe7d888c5c8dba7b" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>VirtualView</name></member>
      <member refid="structllama_1_1VirtualView_1a1ae5e3104bc8fb3507caa4ac7959dddd" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>VirtualView</name></member>
      <member refid="structllama_1_1VirtualView_1abe5b8ab3619c15aec658c7eb7d48495e" prot="public" virt="non-virtual"><scope>llama::VirtualView</scope><name>~VirtualView</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
