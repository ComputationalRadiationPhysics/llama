<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structllama_1_1allocator_1_1Vector" kind="struct" language="C++" prot="public">
    <compoundname>llama::allocator::Vector</compoundname>
    <includes refid="Vector_8hpp" local="no">Vector.hpp</includes>
    <templateparamlist>
      <param>
        <type>std::size_t</type>
        <declname>T_alignment</declname>
        <defname>T_alignment</defname>
        <defval>64u</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structllama_1_1allocator_1_1Vector_1ae31195ba200ef354f13a06d62d33abb4" prot="public" static="no">
        <type>unsigned char</type>
        <definition>using llama::allocator::Vector&lt; T_alignment &gt;::PrimType =  unsigned char</definition>
        <argsstring></argsstring>
        <name>PrimType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="202" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1allocator_1_1Vector_1ac5371899e6d71d54c0df455be9c094a8" prot="public" static="no">
        <type>std::vector&lt; <ref refid="structllama_1_1allocator_1_1Vector_1ae31195ba200ef354f13a06d62d33abb4" kindref="member">PrimType</ref>, <ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator" kindref="compound">internal::AlignmentAllocator</ref>&lt; <ref refid="structllama_1_1allocator_1_1Vector_1ae31195ba200ef354f13a06d62d33abb4" kindref="member">PrimType</ref>, T_alignment &gt; &gt;</type>
        <definition>using llama::allocator::Vector&lt; T_alignment &gt;::BlobType =  std::vector&lt; PrimType, internal::AlignmentAllocator&lt; PrimType, T_alignment &gt; &gt;</definition>
        <argsstring></argsstring>
        <name>BlobType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="203" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1allocator_1_1Vector_1a667a6f29c4ff337f1fa125b55631732b" prot="public" static="no">
        <type>int</type>
        <definition>using llama::allocator::Vector&lt; T_alignment &gt;::Parameter =  int</definition>
        <argsstring></argsstring>
        <name>Parameter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="210" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="210" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structllama_1_1allocator_1_1Vector_1a0fcd8b8ee583807e25dc3c1369a07461" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="macros_8hpp_1affb1b2bdbbed82d386e8cf712cc7e4b5" kindref="member">LLAMA_NO_HOST_ACC_WARNING</ref> auto</type>
        <definition>static LLAMA_NO_HOST_ACC_WARNING auto llama::allocator::Vector&lt; T_alignment &gt;::allocate</definition>
        <argsstring>(std::size_t count, Parameter const) -&gt; BlobType</argsstring>
        <name>allocate</name>
        <param>
          <type>std::size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type><ref refid="structllama_1_1allocator_1_1Vector_1a667a6f29c4ff337f1fa125b55631732b" kindref="member">Parameter</ref></type>
          <declname>const</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="215" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="215" bodyend="222"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="201" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="200" bodyend="223"/>
    <listofallmembers>
      <member refid="structllama_1_1allocator_1_1Vector_1a0fcd8b8ee583807e25dc3c1369a07461" prot="public" virt="non-virtual"><scope>llama::allocator::Vector</scope><name>allocate</name></member>
      <member refid="structllama_1_1allocator_1_1Vector_1ac5371899e6d71d54c0df455be9c094a8" prot="public" virt="non-virtual"><scope>llama::allocator::Vector</scope><name>BlobType</name></member>
      <member refid="structllama_1_1allocator_1_1Vector_1a667a6f29c4ff337f1fa125b55631732b" prot="public" virt="non-virtual"><scope>llama::allocator::Vector</scope><name>Parameter</name></member>
      <member refid="structllama_1_1allocator_1_1Vector_1ae31195ba200ef354f13a06d62d33abb4" prot="public" virt="non-virtual"><scope>llama::allocator::Vector</scope><name>PrimType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
