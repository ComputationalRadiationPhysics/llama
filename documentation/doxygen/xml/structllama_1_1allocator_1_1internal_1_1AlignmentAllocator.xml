<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator" kind="struct" language="C++" prot="public">
    <compoundname>llama::allocator::internal::AlignmentAllocator</compoundname>
    <includes refid="Vector_8hpp" local="no">Vector.hpp</includes>
    <innerclass refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1_1rebind" prot="public">llama::allocator::internal::AlignmentAllocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>N</declname>
        <defname>N</defname>
        <defval>16</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1afee883fe02f547a17dbe346c9f371e22" prot="public" static="no">
        <type>T</type>
        <definition>using llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="37" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a6e2a3a750b7325aa659f5745f3650edf" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="38" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a23219402707f8b8113dba6433ff9c26e" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="39" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1abfb50109bd33f47456de1e559e50cc42" prot="public" static="no">
        <type>T *</type>
        <definition>using llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::pointer =  T *</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="41" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a90e109af0587b02be31fbef81ad4b390" prot="public" static="no">
        <type>T const *</type>
        <definition>using llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::const_pointer =  T const *</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="42" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a7db77961a592c4a4f53506bed27c1663" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::reference =  T &amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="44" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a792b1fe4ad0cdc2411fc514a3afc8283" prot="public" static="no">
        <type>T const &amp;</type>
        <definition>using llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::const_reference =  T const &amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="45" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1abbcd0846100c5e0fed241973a64cafbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::AlignmentAllocator</definition>
        <argsstring>()</argsstring>
        <name>AlignmentAllocator</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="47" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1ac433802ec1f463b270b108cd268a21e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::AlignmentAllocator</definition>
        <argsstring>(AlignmentAllocator&lt; T2, N &gt; const &amp;)</argsstring>
        <name>AlignmentAllocator</name>
        <param>
          <type><ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator" kindref="compound">AlignmentAllocator</ref>&lt; T2, N &gt; const &amp;</type>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="51" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a892cb4026856815cbfa349e82ef836ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::~AlignmentAllocator</definition>
        <argsstring>()</argsstring>
        <name>~AlignmentAllocator</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="59" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a8ca484092e435cf1f7ee3735b786fcc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::adress</definition>
        <argsstring>(reference r) -&gt; pointer</argsstring>
        <name>adress</name>
        <param>
          <type><ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a7db77961a592c4a4f53506bed27c1663" kindref="member">reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="63" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="63" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a09bb0bc4c9fc5561dbf681ac988e214a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::adress</definition>
        <argsstring>(const_reference r) const -&gt; const_pointer</argsstring>
        <name>adress</name>
        <param>
          <type><ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a792b1fe4ad0cdc2411fc514a3afc8283" kindref="member">const_reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="71" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1ad9716205589ec129dfbface2002a4c56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::allocate</definition>
        <argsstring>(size_type n) -&gt; pointer</argsstring>
        <name>allocate</name>
        <param>
          <type><ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a6e2a3a750b7325aa659f5745f3650edf" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="79" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="79" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1ac79d3f42422f2985d8e4e4a38a61e7f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::deallocate</definition>
        <argsstring>(pointer p, size_type) -&gt; void</argsstring>
        <name>deallocate</name>
        <param>
          <type><ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1abfb50109bd33f47456de1e559e50cc42" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a6e2a3a750b7325aa659f5745f3650edf" kindref="member">size_type</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="113" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="113" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1afc3296aec2fd4b211af36c7e7124b4f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::construct</definition>
        <argsstring>(pointer p, value_type const &amp;) -&gt; void</argsstring>
        <name>construct</name>
        <param>
          <type><ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1abfb50109bd33f47456de1e559e50cc42" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1afee883fe02f547a17dbe346c9f371e22" kindref="member">value_type</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="132" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="132" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a35699307aa29052406b1409ffe08bc24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::destroy</definition>
        <argsstring>(pointer p) -&gt; void</argsstring>
        <name>destroy</name>
        <param>
          <type><ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1abfb50109bd33f47456de1e559e50cc42" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="145" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="145" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1ad32b4dc7acfde61383d5b9fded6a4231" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::max_size</definition>
        <argsstring>() const -&gt; size_type</argsstring>
        <name>max_size</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="153" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="153" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a2f74bcec8f8dcdfc34008841066192f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::operator!=</definition>
        <argsstring>(const AlignmentAllocator&lt; T, N &gt; &amp;other) const -&gt; bool</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator" kindref="compound">AlignmentAllocator</ref>&lt; T, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="169" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="169" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a30b8c978cbec72619e185c3433d11c84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto llama::allocator::internal::AlignmentAllocator&lt; T, N &gt;::operator==</definition>
        <argsstring>(const AlignmentAllocator&lt; T, N &gt; &amp;other) const -&gt; bool</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator" kindref="compound">AlignmentAllocator</ref>&lt; T, N &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="185" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="185" bodyend="194"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" line="36" column="1" bodyfile="/home/alexander/develop/work/llama/include/llama/allocator/Vector.hpp" bodystart="35" bodyend="195"/>
    <listofallmembers>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a8ca484092e435cf1f7ee3735b786fcc9" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>adress</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a09bb0bc4c9fc5561dbf681ac988e214a" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>adress</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1abbcd0846100c5e0fed241973a64cafbc" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>AlignmentAllocator</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1ac433802ec1f463b270b108cd268a21e3" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>AlignmentAllocator</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1ad9716205589ec129dfbface2002a4c56" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>allocate</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a90e109af0587b02be31fbef81ad4b390" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>const_pointer</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a792b1fe4ad0cdc2411fc514a3afc8283" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>const_reference</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1afc3296aec2fd4b211af36c7e7124b4f2" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>construct</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1ac79d3f42422f2985d8e4e4a38a61e7f0" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>deallocate</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a35699307aa29052406b1409ffe08bc24" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>destroy</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a23219402707f8b8113dba6433ff9c26e" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>difference_type</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1ad32b4dc7acfde61383d5b9fded6a4231" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>max_size</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a2f74bcec8f8dcdfc34008841066192f7" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>operator!=</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a30b8c978cbec72619e185c3433d11c84" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>operator==</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1abfb50109bd33f47456de1e559e50cc42" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>pointer</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a7db77961a592c4a4f53506bed27c1663" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>reference</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a6e2a3a750b7325aa659f5745f3650edf" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>size_type</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1afee883fe02f547a17dbe346c9f371e22" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>value_type</name></member>
      <member refid="structllama_1_1allocator_1_1internal_1_1AlignmentAllocator_1a892cb4026856815cbfa349e82ef836ef" prot="public" virt="non-virtual"><scope>llama::allocator::internal::AlignmentAllocator</scope><name>~AlignmentAllocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
