/* Copyright 2018 Alexander Matthes
 *
 * This file is part of LLAMA.
 *
 * LLAMA is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * LLAMA is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with LLAMA.  If not, see <www.gnu.org/licenses/>.
 */

#pragma once

#include <tuple>
#include <type_traits>

namespace llama
{
    /** Wrapper class for coordinate inside of datum domain tree.
     * \tparam T_coords... the compile time coordinate
     * */
    template<std::size_t... T_coords>
    struct DatumCoord
    {
        /// type of this DatumCoord
        using type = DatumCoord<T_coords...>;
        /// first coordinate element
        static constexpr std::size_t front;
        /// number of coordinate elements
        static constexpr std::size_t size = sizeof...(T_coords);
        /// last ordinate
        static constexpr std::size_t back;
        /// DatumCoord without first coordinate element
        using PopFront = DatumCoord<T_coords...>;
        /** DatumCoord with new element added at the end
         * \tparam T_newCoord new element
         * */
        template<std::size_t T_newCoord = 0>
        using PushBack = DatumCoord<SomeCoords...>;
        /** Concatenated DatumCoord with another DatumCoord
         * \tparam T_Other other DatumCoord to concatenate
         * */
        template<typename T_Other>
        using Cat = DatumCoord<SomeCoords...>;
    };

    /** Checks at compile time whether a first DatumCoord is bigger than a
     * second. If so a static constexpr value will be set to true otherwise to
     * false. \tparam T_First first \ref DatumCoord in the comparison \tparam
     * T_Second second \ref DatumCoord in the comparison \tparam T_SFinae
     * internal helper template parameter for specialization
     * */
    template<typename T_First, typename T_Second, typename T_SFinae = void>
    struct DatumCoordIsBigger
    {
        /// true of the first DatumCoord is bigger than the second
        static constexpr bool value;
    };

    /** Checks at compile time whether a first DatumCoord is the same as a
     * second. If so a static constexpr value will be set to true otherwise to
     * false. \tparam T_First first \ref DatumCoord in the comparison \tparam
     * T_Second second \ref DatumCoord in the comparison \tparam T_SFinae
     * internal helper template parameter for specialization
     * */
    template<typename T_First, typename T_Second, typename T_SFinae = void>
    struct DatumCoordIsSame
    {
        /// true of both DatumCoords are the same
        static constexpr bool value;
    };

} // namespace llama
